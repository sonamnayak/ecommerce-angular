{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment as env } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass UserService {\n  constructor(client) {\n    this.client = client;\n    this.headers = new HttpHeaders({\n      'content-type': 'application/json'\n    });\n  }\n  getUsers() {\n    return this.client.get(env.apiAddress + '/user');\n  }\n  getUser(id) {\n    return this.client.get(env.apiAddress + '/user/' + id);\n  }\n  addUser(user) {\n    return this.client.post(env.apiAddress + '/user/', JSON.stringify(user), {\n      headers: this.headers,\n      observe: 'response'\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});\nexport { UserService };","map":{"version":3,"names":["HttpHeaders","environment","env","UserService","constructor","client","headers","getUsers","get","apiAddress","getUser","id","addUser","user","post","JSON","stringify","observe","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\shinz\\OneDrive\\Desktop\\web\\ecommerce\\client\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http'\nimport { Observable } from 'rxjs';\nimport { User } from '../models/user.model';\nimport { environment as env } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  headers!: HttpHeaders\n  constructor(private client: HttpClient) {\n    this.headers = new HttpHeaders({'content-type': 'application/json'})\n  }\n\n  getUsers(): Observable<User[]> {\n    return this.client.get<User[]>(env.apiAddress + '/user')\n  }\n\n  getUser(id: string): Observable<User[]> {\n    return this.client.get<User[]>(env.apiAddress + '/user/' + id)\n  }\n\n  addUser(user: User): Observable<HttpResponse<any>> {\n    return this.client.post(env.apiAddress + '/user/', JSON.stringify(user), {headers: this.headers, observe: 'response'})\n  }\n  \n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAsB,sBAAsB;AAG5E,SAASC,WAAW,IAAIC,GAAG,QAAQ,8BAA8B;;;AAEjE,MAGaC,WAAW;EAEtBC,YAAoBC,MAAkB;IAAlB,KAAAA,MAAM,GAANA,MAAM;IACxB,IAAI,CAACC,OAAO,GAAG,IAAIN,WAAW,CAAC;MAAC,cAAc,EAAE;IAAkB,CAAC,CAAC;EACtE;EAEAO,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,MAAM,CAACG,GAAG,CAASN,GAAG,CAACO,UAAU,GAAG,OAAO,CAAC;EAC1D;EAEAC,OAAOA,CAACC,EAAU;IAChB,OAAO,IAAI,CAACN,MAAM,CAACG,GAAG,CAASN,GAAG,CAACO,UAAU,GAAG,QAAQ,GAAGE,EAAE,CAAC;EAChE;EAEAC,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACR,MAAM,CAACS,IAAI,CAACZ,GAAG,CAACO,UAAU,GAAG,QAAQ,EAAEM,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,EAAE;MAACP,OAAO,EAAE,IAAI,CAACA,OAAO;MAAEW,OAAO,EAAE;IAAU,CAAC,CAAC;EACxH;;AAhBWd,WAAW,C;mBAAXA,WAAW,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXlB,WAAW,C;SAAXA,WAAW;EAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPrB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}