{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst {\n  URL\n} = require('url');\nconst http = require('http');\nconst https = require('https');\nconst zlib = require('minizlib');\nconst Minipass = require('minipass');\nconst Body = require('./body.js');\nconst {\n  writeToStream,\n  getTotalBytes\n} = Body;\nconst Response = require('./response.js');\nconst Headers = require('./headers.js');\nconst {\n  createHeadersLenient\n} = Headers;\nconst Request = require('./request.js');\nconst {\n  getNodeRequestOptions\n} = Request;\nconst FetchError = require('./fetch-error.js');\nconst AbortError = require('./abort-error.js');\n\n// XXX this should really be split up and unit-ized for easier testing\n// and better DRY implementation of data/http request aborting\nconst fetch = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (url, opts) {\n    if (/^data:/.test(url)) {\n      const request = new Request(url, opts);\n      // delay 1 promise tick so that the consumer can abort right away\n      return Promise.resolve().then(() => new Promise((resolve, reject) => {\n        let type, data;\n        try {\n          const {\n            pathname,\n            search\n          } = new URL(url);\n          const split = pathname.split(',');\n          if (split.length < 2) {\n            throw new Error('invalid data: URI');\n          }\n          const mime = split.shift();\n          const base64 = /;base64$/.test(mime);\n          type = base64 ? mime.slice(0, -1 * ';base64'.length) : mime;\n          const rawData = decodeURIComponent(split.join(',') + search);\n          data = base64 ? Buffer.from(rawData, 'base64') : Buffer.from(rawData);\n        } catch (er) {\n          return reject(new FetchError(`[${request.method}] ${request.url} invalid URL, ${er.message}`, 'system', er));\n        }\n        const {\n          signal\n        } = request;\n        if (signal && signal.aborted) {\n          return reject(new AbortError('The user aborted a request.'));\n        }\n        const headers = {\n          'Content-Length': data.length\n        };\n        if (type) {\n          headers['Content-Type'] = type;\n        }\n        return resolve(new Response(data, {\n          headers\n        }));\n      }));\n    }\n    return new Promise((resolve, reject) => {\n      // build request object\n      const request = new Request(url, opts);\n      let options;\n      try {\n        options = getNodeRequestOptions(request);\n      } catch (er) {\n        return reject(er);\n      }\n      const send = (options.protocol === 'https:' ? https : http).request;\n      const {\n        signal\n      } = request;\n      let response = null;\n      const abort = () => {\n        const error = new AbortError('The user aborted a request.');\n        reject(error);\n        if (Minipass.isStream(request.body) && typeof request.body.destroy === 'function') {\n          request.body.destroy(error);\n        }\n        if (response && response.body) {\n          response.body.emit('error', error);\n        }\n      };\n      if (signal && signal.aborted) {\n        return abort();\n      }\n      const abortAndFinalize = () => {\n        abort();\n        finalize();\n      };\n      const finalize = () => {\n        req.abort();\n        if (signal) {\n          signal.removeEventListener('abort', abortAndFinalize);\n        }\n        clearTimeout(reqTimeout);\n      };\n\n      // send request\n      const req = send(options);\n      if (signal) {\n        signal.addEventListener('abort', abortAndFinalize);\n      }\n      let reqTimeout = null;\n      if (request.timeout) {\n        req.once('socket', socket => {\n          reqTimeout = setTimeout(() => {\n            reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));\n            finalize();\n          }, request.timeout);\n        });\n      }\n      req.on('error', er => {\n        // if a 'response' event is emitted before the 'error' event, then by the\n        // time this handler is run it's too late to reject the Promise for the\n        // response. instead, we forward the error event to the response stream\n        // so that the error will surface to the user when they try to consume\n        // the body. this is done as a side effect of aborting the request except\n        // for in windows, where we must forward the event manually, otherwise\n        // there is no longer a ref'd socket attached to the request and the\n        // stream never ends so the event loop runs out of work and the process\n        // exits without warning.\n        // coverage skipped here due to the difficulty in testing\n        // istanbul ignore next\n        if (req.res) {\n          req.res.emit('error', er);\n        }\n        reject(new FetchError(`request to ${request.url} failed, reason: ${er.message}`, 'system', er));\n        finalize();\n      });\n      req.on('response', res => {\n        clearTimeout(reqTimeout);\n        const headers = createHeadersLenient(res.headers);\n\n        // HTTP fetch step 5\n        if (fetch.isRedirect(res.statusCode)) {\n          // HTTP fetch step 5.2\n          const location = headers.get('Location');\n\n          // HTTP fetch step 5.3\n          const locationURL = location === null ? null : new URL(location, request.url).toString();\n\n          // HTTP fetch step 5.5\n          if (request.redirect === 'error') {\n            reject(new FetchError('uri requested responds with a redirect, ' + `redirect mode is set to error: ${request.url}`, 'no-redirect'));\n            finalize();\n            return;\n          } else if (request.redirect === 'manual') {\n            // node-fetch-specific step: make manual redirect a bit easier to\n            // use by setting the Location header value to the resolved URL.\n            if (locationURL !== null) {\n              // handle corrupted header\n              try {\n                headers.set('Location', locationURL);\n              } catch (err) {\n                /* istanbul ignore next: nodejs server prevent invalid\n                   response headers, we can't test this through normal\n                   request */\n                reject(err);\n              }\n            }\n          } else if (request.redirect === 'follow' && locationURL !== null) {\n            // HTTP-redirect fetch step 5\n            if (request.counter >= request.follow) {\n              reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n              finalize();\n              return;\n            }\n\n            // HTTP-redirect fetch step 9\n            if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\n              reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n              finalize();\n              return;\n            }\n\n            // Update host due to redirection\n            request.headers.set('host', new URL(locationURL).host);\n\n            // HTTP-redirect fetch step 6 (counter increment)\n            // Create a new Request object.\n            const requestOpts = {\n              headers: new Headers(request.headers),\n              follow: request.follow,\n              counter: request.counter + 1,\n              agent: request.agent,\n              compress: request.compress,\n              method: request.method,\n              body: request.body,\n              signal: request.signal,\n              timeout: request.timeout\n            };\n\n            // if the redirect is to a new hostname, strip the authorization and cookie headers\n            const parsedOriginal = new URL(request.url);\n            const parsedRedirect = new URL(locationURL);\n            if (parsedOriginal.hostname !== parsedRedirect.hostname) {\n              requestOpts.headers.delete('authorization');\n              requestOpts.headers.delete('cookie');\n            }\n\n            // HTTP-redirect fetch step 11\n            if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {\n              requestOpts.method = 'GET';\n              requestOpts.body = undefined;\n              requestOpts.headers.delete('content-length');\n            }\n\n            // HTTP-redirect fetch step 15\n            resolve(fetch(new Request(locationURL, requestOpts)));\n            finalize();\n            return;\n          }\n        } // end if(isRedirect)\n\n        // prepare response\n        res.once('end', () => signal && signal.removeEventListener('abort', abortAndFinalize));\n        const body = new Minipass();\n        // if an error occurs, either on the response stream itself, on one of the\n        // decoder streams, or a response length timeout from the Body class, we\n        // forward the error through to our internal body stream. If we see an\n        // error event on that, we call finalize to abort the request and ensure\n        // we don't leave a socket believing a request is in flight.\n        // this is difficult to test, so lacks specific coverage.\n        body.on('error', finalize);\n        // exceedingly rare that the stream would have an error,\n        // but just in case we proxy it to the stream in use.\n        res.on('error', /* istanbul ignore next */er => body.emit('error', er));\n        res.on('data', chunk => body.write(chunk));\n        res.on('end', () => body.end());\n        const responseOptions = {\n          url: request.url,\n          status: res.statusCode,\n          statusText: res.statusMessage,\n          headers: headers,\n          size: request.size,\n          timeout: request.timeout,\n          counter: request.counter,\n          trailer: new Promise(resolveTrailer => res.on('end', () => resolveTrailer(createHeadersLenient(res.trailers))))\n        };\n\n        // HTTP-network fetch step 12.1.1.3\n        const codings = headers.get('Content-Encoding');\n\n        // HTTP-network fetch step 12.1.1.4: handle content codings\n\n        // in following scenarios we ignore compression support\n        // 1. compression support is disabled\n        // 2. HEAD request\n        // 3. no Content-Encoding header\n        // 4. no content response (204)\n        // 5. content not modified response (304)\n        if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\n          response = new Response(body, responseOptions);\n          resolve(response);\n          return;\n        }\n\n        // Be less strict when decoding compressed responses, since sometimes\n        // servers send slightly invalid responses that are still accepted\n        // by common browsers.\n        // Always using Z_SYNC_FLUSH is what cURL does.\n        const zlibOptions = {\n          flush: zlib.constants.Z_SYNC_FLUSH,\n          finishFlush: zlib.constants.Z_SYNC_FLUSH\n        };\n\n        // for gzip\n        if (codings === 'gzip' || codings === 'x-gzip') {\n          const unzip = new zlib.Gunzip(zlibOptions);\n          response = new Response(\n          // exceedingly rare that the stream would have an error,\n          // but just in case we proxy it to the stream in use.\n          body.on('error', /* istanbul ignore next */er => unzip.emit('error', er)).pipe(unzip), responseOptions);\n          resolve(response);\n          return;\n        }\n\n        // for deflate\n        if (codings === 'deflate' || codings === 'x-deflate') {\n          // handle the infamous raw deflate response from old servers\n          // a hack for old IIS and Apache servers\n          const raw = res.pipe(new Minipass());\n          raw.once('data', chunk => {\n            // see http://stackoverflow.com/questions/37519828\n            const decoder = (chunk[0] & 0x0F) === 0x08 ? new zlib.Inflate() : new zlib.InflateRaw();\n            // exceedingly rare that the stream would have an error,\n            // but just in case we proxy it to the stream in use.\n            body.on('error', /* istanbul ignore next */er => decoder.emit('error', er)).pipe(decoder);\n            response = new Response(decoder, responseOptions);\n            resolve(response);\n          });\n          return;\n        }\n\n        // for br\n        if (codings === 'br') {\n          // ignoring coverage so tests don't have to fake support (or lack of) for brotli\n          // istanbul ignore next\n          try {\n            var decoder = new zlib.BrotliDecompress();\n          } catch (err) {\n            reject(err);\n            finalize();\n            return;\n          }\n          // exceedingly rare that the stream would have an error,\n          // but just in case we proxy it to the stream in use.\n          body.on('error', /* istanbul ignore next */er => decoder.emit('error', er)).pipe(decoder);\n          response = new Response(decoder, responseOptions);\n          resolve(response);\n          return;\n        }\n\n        // otherwise, use response as-is\n        response = new Response(body, responseOptions);\n        resolve(response);\n      });\n      writeToStream(req, request);\n    });\n  });\n  return function fetch(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = fetch;\nfetch.isRedirect = code => code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\nfetch.Headers = Headers;\nfetch.Request = Request;\nfetch.Response = Response;\nfetch.FetchError = FetchError;\nfetch.AbortError = AbortError;","map":{"version":3,"names":["_asyncToGenerator","require","default","URL","http","https","zlib","Minipass","Body","writeToStream","getTotalBytes","Response","Headers","createHeadersLenient","Request","getNodeRequestOptions","FetchError","AbortError","fetch","_ref","url","opts","test","request","Promise","resolve","then","reject","type","data","pathname","search","split","length","Error","mime","shift","base64","slice","rawData","decodeURIComponent","join","Buffer","from","er","method","message","signal","aborted","headers","options","send","protocol","response","abort","error","isStream","body","destroy","emit","abortAndFinalize","finalize","req","removeEventListener","clearTimeout","reqTimeout","addEventListener","timeout","once","socket","setTimeout","on","res","isRedirect","statusCode","location","get","locationURL","toString","redirect","set","err","counter","follow","host","requestOpts","agent","compress","parsedOriginal","parsedRedirect","hostname","delete","undefined","chunk","write","end","responseOptions","status","statusText","statusMessage","size","trailer","resolveTrailer","trailers","codings","zlibOptions","flush","constants","Z_SYNC_FLUSH","finishFlush","unzip","Gunzip","pipe","raw","decoder","Inflate","InflateRaw","BrotliDecompress","_x","_x2","apply","arguments","module","exports","code"],"sources":["C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/minipass-fetch/lib/index.js"],"sourcesContent":["'use strict'\nconst { URL } = require('url')\nconst http = require('http')\nconst https = require('https')\nconst zlib = require('minizlib')\nconst Minipass = require('minipass')\n\nconst Body = require('./body.js')\nconst { writeToStream, getTotalBytes } = Body\nconst Response = require('./response.js')\nconst Headers = require('./headers.js')\nconst { createHeadersLenient } = Headers\nconst Request = require('./request.js')\nconst { getNodeRequestOptions } = Request\nconst FetchError = require('./fetch-error.js')\nconst AbortError = require('./abort-error.js')\n\n// XXX this should really be split up and unit-ized for easier testing\n// and better DRY implementation of data/http request aborting\nconst fetch = async (url, opts) => {\n  if (/^data:/.test(url)) {\n    const request = new Request(url, opts)\n    // delay 1 promise tick so that the consumer can abort right away\n    return Promise.resolve().then(() => new Promise((resolve, reject) => {\n      let type, data\n      try {\n        const { pathname, search } = new URL(url)\n        const split = pathname.split(',')\n        if (split.length < 2) {\n          throw new Error('invalid data: URI')\n        }\n        const mime = split.shift()\n        const base64 = /;base64$/.test(mime)\n        type = base64 ? mime.slice(0, -1 * ';base64'.length) : mime\n        const rawData = decodeURIComponent(split.join(',') + search)\n        data = base64 ? Buffer.from(rawData, 'base64') : Buffer.from(rawData)\n      } catch (er) {\n        return reject(new FetchError(`[${request.method}] ${\n          request.url} invalid URL, ${er.message}`, 'system', er))\n      }\n\n      const { signal } = request\n      if (signal && signal.aborted) {\n        return reject(new AbortError('The user aborted a request.'))\n      }\n\n      const headers = { 'Content-Length': data.length }\n      if (type) {\n        headers['Content-Type'] = type\n      }\n      return resolve(new Response(data, { headers }))\n    }))\n  }\n\n  return new Promise((resolve, reject) => {\n    // build request object\n    const request = new Request(url, opts)\n    let options\n    try {\n      options = getNodeRequestOptions(request)\n    } catch (er) {\n      return reject(er)\n    }\n\n    const send = (options.protocol === 'https:' ? https : http).request\n    const { signal } = request\n    let response = null\n    const abort = () => {\n      const error = new AbortError('The user aborted a request.')\n      reject(error)\n      if (Minipass.isStream(request.body) &&\n          typeof request.body.destroy === 'function') {\n        request.body.destroy(error)\n      }\n      if (response && response.body) {\n        response.body.emit('error', error)\n      }\n    }\n\n    if (signal && signal.aborted) {\n      return abort()\n    }\n\n    const abortAndFinalize = () => {\n      abort()\n      finalize()\n    }\n\n    const finalize = () => {\n      req.abort()\n      if (signal) {\n        signal.removeEventListener('abort', abortAndFinalize)\n      }\n      clearTimeout(reqTimeout)\n    }\n\n    // send request\n    const req = send(options)\n\n    if (signal) {\n      signal.addEventListener('abort', abortAndFinalize)\n    }\n\n    let reqTimeout = null\n    if (request.timeout) {\n      req.once('socket', socket => {\n        reqTimeout = setTimeout(() => {\n          reject(new FetchError(`network timeout at: ${\n            request.url}`, 'request-timeout'))\n          finalize()\n        }, request.timeout)\n      })\n    }\n\n    req.on('error', er => {\n      // if a 'response' event is emitted before the 'error' event, then by the\n      // time this handler is run it's too late to reject the Promise for the\n      // response. instead, we forward the error event to the response stream\n      // so that the error will surface to the user when they try to consume\n      // the body. this is done as a side effect of aborting the request except\n      // for in windows, where we must forward the event manually, otherwise\n      // there is no longer a ref'd socket attached to the request and the\n      // stream never ends so the event loop runs out of work and the process\n      // exits without warning.\n      // coverage skipped here due to the difficulty in testing\n      // istanbul ignore next\n      if (req.res) {\n        req.res.emit('error', er)\n      }\n      reject(new FetchError(`request to ${request.url} failed, reason: ${\n        er.message}`, 'system', er))\n      finalize()\n    })\n\n    req.on('response', res => {\n      clearTimeout(reqTimeout)\n\n      const headers = createHeadersLenient(res.headers)\n\n      // HTTP fetch step 5\n      if (fetch.isRedirect(res.statusCode)) {\n        // HTTP fetch step 5.2\n        const location = headers.get('Location')\n\n        // HTTP fetch step 5.3\n        const locationURL = location === null ? null\n          : (new URL(location, request.url)).toString()\n\n        // HTTP fetch step 5.5\n        if (request.redirect === 'error') {\n          reject(new FetchError('uri requested responds with a redirect, ' +\n            `redirect mode is set to error: ${request.url}`, 'no-redirect'))\n          finalize()\n          return\n        } else if (request.redirect === 'manual') {\n          // node-fetch-specific step: make manual redirect a bit easier to\n          // use by setting the Location header value to the resolved URL.\n          if (locationURL !== null) {\n            // handle corrupted header\n            try {\n              headers.set('Location', locationURL)\n            } catch (err) {\n              /* istanbul ignore next: nodejs server prevent invalid\n                 response headers, we can't test this through normal\n                 request */\n              reject(err)\n            }\n          }\n        } else if (request.redirect === 'follow' && locationURL !== null) {\n          // HTTP-redirect fetch step 5\n          if (request.counter >= request.follow) {\n            reject(new FetchError(`maximum redirect reached at: ${\n              request.url}`, 'max-redirect'))\n            finalize()\n            return\n          }\n\n          // HTTP-redirect fetch step 9\n          if (res.statusCode !== 303 &&\n              request.body &&\n              getTotalBytes(request) === null) {\n            reject(new FetchError(\n              'Cannot follow redirect with body being a readable stream',\n              'unsupported-redirect'\n            ))\n            finalize()\n            return\n          }\n\n          // Update host due to redirection\n          request.headers.set('host', (new URL(locationURL)).host)\n\n          // HTTP-redirect fetch step 6 (counter increment)\n          // Create a new Request object.\n          const requestOpts = {\n            headers: new Headers(request.headers),\n            follow: request.follow,\n            counter: request.counter + 1,\n            agent: request.agent,\n            compress: request.compress,\n            method: request.method,\n            body: request.body,\n            signal: request.signal,\n            timeout: request.timeout,\n          }\n\n          // if the redirect is to a new hostname, strip the authorization and cookie headers\n          const parsedOriginal = new URL(request.url)\n          const parsedRedirect = new URL(locationURL)\n          if (parsedOriginal.hostname !== parsedRedirect.hostname) {\n            requestOpts.headers.delete('authorization')\n            requestOpts.headers.delete('cookie')\n          }\n\n          // HTTP-redirect fetch step 11\n          if (res.statusCode === 303 || (\n            (res.statusCode === 301 || res.statusCode === 302) &&\n              request.method === 'POST'\n          )) {\n            requestOpts.method = 'GET'\n            requestOpts.body = undefined\n            requestOpts.headers.delete('content-length')\n          }\n\n          // HTTP-redirect fetch step 15\n          resolve(fetch(new Request(locationURL, requestOpts)))\n          finalize()\n          return\n        }\n      } // end if(isRedirect)\n\n      // prepare response\n      res.once('end', () =>\n        signal && signal.removeEventListener('abort', abortAndFinalize))\n\n      const body = new Minipass()\n      // if an error occurs, either on the response stream itself, on one of the\n      // decoder streams, or a response length timeout from the Body class, we\n      // forward the error through to our internal body stream. If we see an\n      // error event on that, we call finalize to abort the request and ensure\n      // we don't leave a socket believing a request is in flight.\n      // this is difficult to test, so lacks specific coverage.\n      body.on('error', finalize)\n      // exceedingly rare that the stream would have an error,\n      // but just in case we proxy it to the stream in use.\n      res.on('error', /* istanbul ignore next */ er => body.emit('error', er))\n      res.on('data', (chunk) => body.write(chunk))\n      res.on('end', () => body.end())\n\n      const responseOptions = {\n        url: request.url,\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: headers,\n        size: request.size,\n        timeout: request.timeout,\n        counter: request.counter,\n        trailer: new Promise(resolveTrailer =>\n          res.on('end', () => resolveTrailer(createHeadersLenient(res.trailers)))),\n      }\n\n      // HTTP-network fetch step 12.1.1.3\n      const codings = headers.get('Content-Encoding')\n\n      // HTTP-network fetch step 12.1.1.4: handle content codings\n\n      // in following scenarios we ignore compression support\n      // 1. compression support is disabled\n      // 2. HEAD request\n      // 3. no Content-Encoding header\n      // 4. no content response (204)\n      // 5. content not modified response (304)\n      if (!request.compress ||\n          request.method === 'HEAD' ||\n          codings === null ||\n          res.statusCode === 204 ||\n          res.statusCode === 304) {\n        response = new Response(body, responseOptions)\n        resolve(response)\n        return\n      }\n\n      // Be less strict when decoding compressed responses, since sometimes\n      // servers send slightly invalid responses that are still accepted\n      // by common browsers.\n      // Always using Z_SYNC_FLUSH is what cURL does.\n      const zlibOptions = {\n        flush: zlib.constants.Z_SYNC_FLUSH,\n        finishFlush: zlib.constants.Z_SYNC_FLUSH,\n      }\n\n      // for gzip\n      if (codings === 'gzip' || codings === 'x-gzip') {\n        const unzip = new zlib.Gunzip(zlibOptions)\n        response = new Response(\n          // exceedingly rare that the stream would have an error,\n          // but just in case we proxy it to the stream in use.\n          body.on('error', /* istanbul ignore next */ er => unzip.emit('error', er)).pipe(unzip),\n          responseOptions\n        )\n        resolve(response)\n        return\n      }\n\n      // for deflate\n      if (codings === 'deflate' || codings === 'x-deflate') {\n        // handle the infamous raw deflate response from old servers\n        // a hack for old IIS and Apache servers\n        const raw = res.pipe(new Minipass())\n        raw.once('data', chunk => {\n          // see http://stackoverflow.com/questions/37519828\n          const decoder = (chunk[0] & 0x0F) === 0x08\n            ? new zlib.Inflate()\n            : new zlib.InflateRaw()\n          // exceedingly rare that the stream would have an error,\n          // but just in case we proxy it to the stream in use.\n          body.on('error', /* istanbul ignore next */ er => decoder.emit('error', er)).pipe(decoder)\n          response = new Response(decoder, responseOptions)\n          resolve(response)\n        })\n        return\n      }\n\n      // for br\n      if (codings === 'br') {\n        // ignoring coverage so tests don't have to fake support (or lack of) for brotli\n        // istanbul ignore next\n        try {\n          var decoder = new zlib.BrotliDecompress()\n        } catch (err) {\n          reject(err)\n          finalize()\n          return\n        }\n        // exceedingly rare that the stream would have an error,\n        // but just in case we proxy it to the stream in use.\n        body.on('error', /* istanbul ignore next */ er => decoder.emit('error', er)).pipe(decoder)\n        response = new Response(decoder, responseOptions)\n        resolve(response)\n        return\n      }\n\n      // otherwise, use response as-is\n      response = new Response(body, responseOptions)\n      resolve(response)\n    })\n\n    writeToStream(req, request)\n  })\n}\n\nmodule.exports = fetch\n\nfetch.isRedirect = code =>\n  code === 301 ||\n  code === 302 ||\n  code === 303 ||\n  code === 307 ||\n  code === 308\n\nfetch.Headers = Headers\nfetch.Request = Request\nfetch.Response = Response\nfetch.FetchError = FetchError\nfetch.AbortError = AbortError\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,iBAAA,GAAAC,OAAA,0GAAAC,OAAA;AACZ,MAAM;EAAEC;AAAI,CAAC,GAAGF,OAAO,CAAC,KAAK,CAAC;AAC9B,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMK,IAAI,GAAGL,OAAO,CAAC,UAAU,CAAC;AAChC,MAAMM,QAAQ,GAAGN,OAAO,CAAC,UAAU,CAAC;AAEpC,MAAMO,IAAI,GAAGP,OAAO,CAAC,WAAW,CAAC;AACjC,MAAM;EAAEQ,aAAa;EAAEC;AAAc,CAAC,GAAGF,IAAI;AAC7C,MAAMG,QAAQ,GAAGV,OAAO,CAAC,eAAe,CAAC;AACzC,MAAMW,OAAO,GAAGX,OAAO,CAAC,cAAc,CAAC;AACvC,MAAM;EAAEY;AAAqB,CAAC,GAAGD,OAAO;AACxC,MAAME,OAAO,GAAGb,OAAO,CAAC,cAAc,CAAC;AACvC,MAAM;EAAEc;AAAsB,CAAC,GAAGD,OAAO;AACzC,MAAME,UAAU,GAAGf,OAAO,CAAC,kBAAkB,CAAC;AAC9C,MAAMgB,UAAU,GAAGhB,OAAO,CAAC,kBAAkB,CAAC;;AAE9C;AACA;AACA,MAAMiB,KAAK;EAAA,IAAAC,IAAA,GAAAnB,iBAAA,CAAG,WAAOoB,GAAG,EAAEC,IAAI,EAAK;IACjC,IAAI,QAAQ,CAACC,IAAI,CAACF,GAAG,CAAC,EAAE;MACtB,MAAMG,OAAO,GAAG,IAAIT,OAAO,CAACM,GAAG,EAAEC,IAAI,CAAC;MACtC;MACA,OAAOG,OAAO,CAACC,OAAO,EAAE,CAACC,IAAI,CAAC,MAAM,IAAIF,OAAO,CAAC,CAACC,OAAO,EAAEE,MAAM,KAAK;QACnE,IAAIC,IAAI,EAAEC,IAAI;QACd,IAAI;UACF,MAAM;YAAEC,QAAQ;YAAEC;UAAO,CAAC,GAAG,IAAI5B,GAAG,CAACiB,GAAG,CAAC;UACzC,MAAMY,KAAK,GAAGF,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC;UACjC,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;YACpB,MAAM,IAAIC,KAAK,CAAC,mBAAmB,CAAC;UACtC;UACA,MAAMC,IAAI,GAAGH,KAAK,CAACI,KAAK,EAAE;UAC1B,MAAMC,MAAM,GAAG,UAAU,CAACf,IAAI,CAACa,IAAI,CAAC;UACpCP,IAAI,GAAGS,MAAM,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,SAAS,CAACL,MAAM,CAAC,GAAGE,IAAI;UAC3D,MAAMI,OAAO,GAAGC,kBAAkB,CAACR,KAAK,CAACS,IAAI,CAAC,GAAG,CAAC,GAAGV,MAAM,CAAC;UAC5DF,IAAI,GAAGQ,MAAM,GAAGK,MAAM,CAACC,IAAI,CAACJ,OAAO,EAAE,QAAQ,CAAC,GAAGG,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC;QACvE,CAAC,CAAC,OAAOK,EAAE,EAAE;UACX,OAAOjB,MAAM,CAAC,IAAIX,UAAU,CAAE,IAAGO,OAAO,CAACsB,MAAO,KAC9CtB,OAAO,CAACH,GAAI,iBAAgBwB,EAAE,CAACE,OAAQ,EAAC,EAAE,QAAQ,EAAEF,EAAE,CAAC,CAAC;QAC5D;QAEA,MAAM;UAAEG;QAAO,CAAC,GAAGxB,OAAO;QAC1B,IAAIwB,MAAM,IAAIA,MAAM,CAACC,OAAO,EAAE;UAC5B,OAAOrB,MAAM,CAAC,IAAIV,UAAU,CAAC,6BAA6B,CAAC,CAAC;QAC9D;QAEA,MAAMgC,OAAO,GAAG;UAAE,gBAAgB,EAAEpB,IAAI,CAACI;QAAO,CAAC;QACjD,IAAIL,IAAI,EAAE;UACRqB,OAAO,CAAC,cAAc,CAAC,GAAGrB,IAAI;QAChC;QACA,OAAOH,OAAO,CAAC,IAAId,QAAQ,CAACkB,IAAI,EAAE;UAAEoB;QAAQ,CAAC,CAAC,CAAC;MACjD,CAAC,CAAC,CAAC;IACL;IAEA,OAAO,IAAIzB,OAAO,CAAC,CAACC,OAAO,EAAEE,MAAM,KAAK;MACtC;MACA,MAAMJ,OAAO,GAAG,IAAIT,OAAO,CAACM,GAAG,EAAEC,IAAI,CAAC;MACtC,IAAI6B,OAAO;MACX,IAAI;QACFA,OAAO,GAAGnC,qBAAqB,CAACQ,OAAO,CAAC;MAC1C,CAAC,CAAC,OAAOqB,EAAE,EAAE;QACX,OAAOjB,MAAM,CAACiB,EAAE,CAAC;MACnB;MAEA,MAAMO,IAAI,GAAG,CAACD,OAAO,CAACE,QAAQ,KAAK,QAAQ,GAAG/C,KAAK,GAAGD,IAAI,EAAEmB,OAAO;MACnE,MAAM;QAAEwB;MAAO,CAAC,GAAGxB,OAAO;MAC1B,IAAI8B,QAAQ,GAAG,IAAI;MACnB,MAAMC,KAAK,GAAGA,CAAA,KAAM;QAClB,MAAMC,KAAK,GAAG,IAAItC,UAAU,CAAC,6BAA6B,CAAC;QAC3DU,MAAM,CAAC4B,KAAK,CAAC;QACb,IAAIhD,QAAQ,CAACiD,QAAQ,CAACjC,OAAO,CAACkC,IAAI,CAAC,IAC/B,OAAOlC,OAAO,CAACkC,IAAI,CAACC,OAAO,KAAK,UAAU,EAAE;UAC9CnC,OAAO,CAACkC,IAAI,CAACC,OAAO,CAACH,KAAK,CAAC;QAC7B;QACA,IAAIF,QAAQ,IAAIA,QAAQ,CAACI,IAAI,EAAE;UAC7BJ,QAAQ,CAACI,IAAI,CAACE,IAAI,CAAC,OAAO,EAAEJ,KAAK,CAAC;QACpC;MACF,CAAC;MAED,IAAIR,MAAM,IAAIA,MAAM,CAACC,OAAO,EAAE;QAC5B,OAAOM,KAAK,EAAE;MAChB;MAEA,MAAMM,gBAAgB,GAAGA,CAAA,KAAM;QAC7BN,KAAK,EAAE;QACPO,QAAQ,EAAE;MACZ,CAAC;MAED,MAAMA,QAAQ,GAAGA,CAAA,KAAM;QACrBC,GAAG,CAACR,KAAK,EAAE;QACX,IAAIP,MAAM,EAAE;UACVA,MAAM,CAACgB,mBAAmB,CAAC,OAAO,EAAEH,gBAAgB,CAAC;QACvD;QACAI,YAAY,CAACC,UAAU,CAAC;MAC1B,CAAC;;MAED;MACA,MAAMH,GAAG,GAAGX,IAAI,CAACD,OAAO,CAAC;MAEzB,IAAIH,MAAM,EAAE;QACVA,MAAM,CAACmB,gBAAgB,CAAC,OAAO,EAAEN,gBAAgB,CAAC;MACpD;MAEA,IAAIK,UAAU,GAAG,IAAI;MACrB,IAAI1C,OAAO,CAAC4C,OAAO,EAAE;QACnBL,GAAG,CAACM,IAAI,CAAC,QAAQ,EAAEC,MAAM,IAAI;UAC3BJ,UAAU,GAAGK,UAAU,CAAC,MAAM;YAC5B3C,MAAM,CAAC,IAAIX,UAAU,CAAE,uBACrBO,OAAO,CAACH,GAAI,EAAC,EAAE,iBAAiB,CAAC,CAAC;YACpCyC,QAAQ,EAAE;UACZ,CAAC,EAAEtC,OAAO,CAAC4C,OAAO,CAAC;QACrB,CAAC,CAAC;MACJ;MAEAL,GAAG,CAACS,EAAE,CAAC,OAAO,EAAE3B,EAAE,IAAI;QACpB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,IAAIkB,GAAG,CAACU,GAAG,EAAE;UACXV,GAAG,CAACU,GAAG,CAACb,IAAI,CAAC,OAAO,EAAEf,EAAE,CAAC;QAC3B;QACAjB,MAAM,CAAC,IAAIX,UAAU,CAAE,cAAaO,OAAO,CAACH,GAAI,oBAC9CwB,EAAE,CAACE,OAAQ,EAAC,EAAE,QAAQ,EAAEF,EAAE,CAAC,CAAC;QAC9BiB,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEFC,GAAG,CAACS,EAAE,CAAC,UAAU,EAAEC,GAAG,IAAI;QACxBR,YAAY,CAACC,UAAU,CAAC;QAExB,MAAMhB,OAAO,GAAGpC,oBAAoB,CAAC2D,GAAG,CAACvB,OAAO,CAAC;;QAEjD;QACA,IAAI/B,KAAK,CAACuD,UAAU,CAACD,GAAG,CAACE,UAAU,CAAC,EAAE;UACpC;UACA,MAAMC,QAAQ,GAAG1B,OAAO,CAAC2B,GAAG,CAAC,UAAU,CAAC;;UAExC;UACA,MAAMC,WAAW,GAAGF,QAAQ,KAAK,IAAI,GAAG,IAAI,GACvC,IAAIxE,GAAG,CAACwE,QAAQ,EAAEpD,OAAO,CAACH,GAAG,CAAC,CAAE0D,QAAQ,EAAE;;UAE/C;UACA,IAAIvD,OAAO,CAACwD,QAAQ,KAAK,OAAO,EAAE;YAChCpD,MAAM,CAAC,IAAIX,UAAU,CAAC,0CAA0C,GAC7D,kCAAiCO,OAAO,CAACH,GAAI,EAAC,EAAE,aAAa,CAAC,CAAC;YAClEyC,QAAQ,EAAE;YACV;UACF,CAAC,MAAM,IAAItC,OAAO,CAACwD,QAAQ,KAAK,QAAQ,EAAE;YACxC;YACA;YACA,IAAIF,WAAW,KAAK,IAAI,EAAE;cACxB;cACA,IAAI;gBACF5B,OAAO,CAAC+B,GAAG,CAAC,UAAU,EAAEH,WAAW,CAAC;cACtC,CAAC,CAAC,OAAOI,GAAG,EAAE;gBACZ;AACd;AACA;gBACctD,MAAM,CAACsD,GAAG,CAAC;cACb;YACF;UACF,CAAC,MAAM,IAAI1D,OAAO,CAACwD,QAAQ,KAAK,QAAQ,IAAIF,WAAW,KAAK,IAAI,EAAE;YAChE;YACA,IAAItD,OAAO,CAAC2D,OAAO,IAAI3D,OAAO,CAAC4D,MAAM,EAAE;cACrCxD,MAAM,CAAC,IAAIX,UAAU,CAAE,gCACrBO,OAAO,CAACH,GAAI,EAAC,EAAE,cAAc,CAAC,CAAC;cACjCyC,QAAQ,EAAE;cACV;YACF;;YAEA;YACA,IAAIW,GAAG,CAACE,UAAU,KAAK,GAAG,IACtBnD,OAAO,CAACkC,IAAI,IACZ/C,aAAa,CAACa,OAAO,CAAC,KAAK,IAAI,EAAE;cACnCI,MAAM,CAAC,IAAIX,UAAU,CACnB,0DAA0D,EAC1D,sBAAsB,CACvB,CAAC;cACF6C,QAAQ,EAAE;cACV;YACF;;YAEA;YACAtC,OAAO,CAAC0B,OAAO,CAAC+B,GAAG,CAAC,MAAM,EAAG,IAAI7E,GAAG,CAAC0E,WAAW,CAAC,CAAEO,IAAI,CAAC;;YAExD;YACA;YACA,MAAMC,WAAW,GAAG;cAClBpC,OAAO,EAAE,IAAIrC,OAAO,CAACW,OAAO,CAAC0B,OAAO,CAAC;cACrCkC,MAAM,EAAE5D,OAAO,CAAC4D,MAAM;cACtBD,OAAO,EAAE3D,OAAO,CAAC2D,OAAO,GAAG,CAAC;cAC5BI,KAAK,EAAE/D,OAAO,CAAC+D,KAAK;cACpBC,QAAQ,EAAEhE,OAAO,CAACgE,QAAQ;cAC1B1C,MAAM,EAAEtB,OAAO,CAACsB,MAAM;cACtBY,IAAI,EAAElC,OAAO,CAACkC,IAAI;cAClBV,MAAM,EAAExB,OAAO,CAACwB,MAAM;cACtBoB,OAAO,EAAE5C,OAAO,CAAC4C;YACnB,CAAC;;YAED;YACA,MAAMqB,cAAc,GAAG,IAAIrF,GAAG,CAACoB,OAAO,CAACH,GAAG,CAAC;YAC3C,MAAMqE,cAAc,GAAG,IAAItF,GAAG,CAAC0E,WAAW,CAAC;YAC3C,IAAIW,cAAc,CAACE,QAAQ,KAAKD,cAAc,CAACC,QAAQ,EAAE;cACvDL,WAAW,CAACpC,OAAO,CAAC0C,MAAM,CAAC,eAAe,CAAC;cAC3CN,WAAW,CAACpC,OAAO,CAAC0C,MAAM,CAAC,QAAQ,CAAC;YACtC;;YAEA;YACA,IAAInB,GAAG,CAACE,UAAU,KAAK,GAAG,IACxB,CAACF,GAAG,CAACE,UAAU,KAAK,GAAG,IAAIF,GAAG,CAACE,UAAU,KAAK,GAAG,KAC/CnD,OAAO,CAACsB,MAAM,KAAK,MACtB,EAAE;cACDwC,WAAW,CAACxC,MAAM,GAAG,KAAK;cAC1BwC,WAAW,CAAC5B,IAAI,GAAGmC,SAAS;cAC5BP,WAAW,CAACpC,OAAO,CAAC0C,MAAM,CAAC,gBAAgB,CAAC;YAC9C;;YAEA;YACAlE,OAAO,CAACP,KAAK,CAAC,IAAIJ,OAAO,CAAC+D,WAAW,EAAEQ,WAAW,CAAC,CAAC,CAAC;YACrDxB,QAAQ,EAAE;YACV;UACF;QACF,CAAC,CAAC;;QAEF;QACAW,GAAG,CAACJ,IAAI,CAAC,KAAK,EAAE,MACdrB,MAAM,IAAIA,MAAM,CAACgB,mBAAmB,CAAC,OAAO,EAAEH,gBAAgB,CAAC,CAAC;QAElE,MAAMH,IAAI,GAAG,IAAIlD,QAAQ,EAAE;QAC3B;QACA;QACA;QACA;QACA;QACA;QACAkD,IAAI,CAACc,EAAE,CAAC,OAAO,EAAEV,QAAQ,CAAC;QAC1B;QACA;QACAW,GAAG,CAACD,EAAE,CAAC,OAAO,EAAE,0BAA2B3B,EAAE,IAAIa,IAAI,CAACE,IAAI,CAAC,OAAO,EAAEf,EAAE,CAAC,CAAC;QACxE4B,GAAG,CAACD,EAAE,CAAC,MAAM,EAAGsB,KAAK,IAAKpC,IAAI,CAACqC,KAAK,CAACD,KAAK,CAAC,CAAC;QAC5CrB,GAAG,CAACD,EAAE,CAAC,KAAK,EAAE,MAAMd,IAAI,CAACsC,GAAG,EAAE,CAAC;QAE/B,MAAMC,eAAe,GAAG;UACtB5E,GAAG,EAAEG,OAAO,CAACH,GAAG;UAChB6E,MAAM,EAAEzB,GAAG,CAACE,UAAU;UACtBwB,UAAU,EAAE1B,GAAG,CAAC2B,aAAa;UAC7BlD,OAAO,EAAEA,OAAO;UAChBmD,IAAI,EAAE7E,OAAO,CAAC6E,IAAI;UAClBjC,OAAO,EAAE5C,OAAO,CAAC4C,OAAO;UACxBe,OAAO,EAAE3D,OAAO,CAAC2D,OAAO;UACxBmB,OAAO,EAAE,IAAI7E,OAAO,CAAC8E,cAAc,IACjC9B,GAAG,CAACD,EAAE,CAAC,KAAK,EAAE,MAAM+B,cAAc,CAACzF,oBAAoB,CAAC2D,GAAG,CAAC+B,QAAQ,CAAC,CAAC,CAAC;QAC3E,CAAC;;QAED;QACA,MAAMC,OAAO,GAAGvD,OAAO,CAAC2B,GAAG,CAAC,kBAAkB,CAAC;;QAE/C;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA,IAAI,CAACrD,OAAO,CAACgE,QAAQ,IACjBhE,OAAO,CAACsB,MAAM,KAAK,MAAM,IACzB2D,OAAO,KAAK,IAAI,IAChBhC,GAAG,CAACE,UAAU,KAAK,GAAG,IACtBF,GAAG,CAACE,UAAU,KAAK,GAAG,EAAE;UAC1BrB,QAAQ,GAAG,IAAI1C,QAAQ,CAAC8C,IAAI,EAAEuC,eAAe,CAAC;UAC9CvE,OAAO,CAAC4B,QAAQ,CAAC;UACjB;QACF;;QAEA;QACA;QACA;QACA;QACA,MAAMoD,WAAW,GAAG;UAClBC,KAAK,EAAEpG,IAAI,CAACqG,SAAS,CAACC,YAAY;UAClCC,WAAW,EAAEvG,IAAI,CAACqG,SAAS,CAACC;QAC9B,CAAC;;QAED;QACA,IAAIJ,OAAO,KAAK,MAAM,IAAIA,OAAO,KAAK,QAAQ,EAAE;UAC9C,MAAMM,KAAK,GAAG,IAAIxG,IAAI,CAACyG,MAAM,CAACN,WAAW,CAAC;UAC1CpD,QAAQ,GAAG,IAAI1C,QAAQ;UACrB;UACA;UACA8C,IAAI,CAACc,EAAE,CAAC,OAAO,EAAE,0BAA2B3B,EAAE,IAAIkE,KAAK,CAACnD,IAAI,CAAC,OAAO,EAAEf,EAAE,CAAC,CAAC,CAACoE,IAAI,CAACF,KAAK,CAAC,EACtFd,eAAe,CAChB;UACDvE,OAAO,CAAC4B,QAAQ,CAAC;UACjB;QACF;;QAEA;QACA,IAAImD,OAAO,KAAK,SAAS,IAAIA,OAAO,KAAK,WAAW,EAAE;UACpD;UACA;UACA,MAAMS,GAAG,GAAGzC,GAAG,CAACwC,IAAI,CAAC,IAAIzG,QAAQ,EAAE,CAAC;UACpC0G,GAAG,CAAC7C,IAAI,CAAC,MAAM,EAAEyB,KAAK,IAAI;YACxB;YACA,MAAMqB,OAAO,GAAG,CAACrB,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,GACtC,IAAIvF,IAAI,CAAC6G,OAAO,EAAE,GAClB,IAAI7G,IAAI,CAAC8G,UAAU,EAAE;YACzB;YACA;YACA3D,IAAI,CAACc,EAAE,CAAC,OAAO,EAAE,0BAA2B3B,EAAE,IAAIsE,OAAO,CAACvD,IAAI,CAAC,OAAO,EAAEf,EAAE,CAAC,CAAC,CAACoE,IAAI,CAACE,OAAO,CAAC;YAC1F7D,QAAQ,GAAG,IAAI1C,QAAQ,CAACuG,OAAO,EAAElB,eAAe,CAAC;YACjDvE,OAAO,CAAC4B,QAAQ,CAAC;UACnB,CAAC,CAAC;UACF;QACF;;QAEA;QACA,IAAImD,OAAO,KAAK,IAAI,EAAE;UACpB;UACA;UACA,IAAI;YACF,IAAIU,OAAO,GAAG,IAAI5G,IAAI,CAAC+G,gBAAgB,EAAE;UAC3C,CAAC,CAAC,OAAOpC,GAAG,EAAE;YACZtD,MAAM,CAACsD,GAAG,CAAC;YACXpB,QAAQ,EAAE;YACV;UACF;UACA;UACA;UACAJ,IAAI,CAACc,EAAE,CAAC,OAAO,EAAE,0BAA2B3B,EAAE,IAAIsE,OAAO,CAACvD,IAAI,CAAC,OAAO,EAAEf,EAAE,CAAC,CAAC,CAACoE,IAAI,CAACE,OAAO,CAAC;UAC1F7D,QAAQ,GAAG,IAAI1C,QAAQ,CAACuG,OAAO,EAAElB,eAAe,CAAC;UACjDvE,OAAO,CAAC4B,QAAQ,CAAC;UACjB;QACF;;QAEA;QACAA,QAAQ,GAAG,IAAI1C,QAAQ,CAAC8C,IAAI,EAAEuC,eAAe,CAAC;QAC9CvE,OAAO,CAAC4B,QAAQ,CAAC;MACnB,CAAC,CAAC;MAEF5C,aAAa,CAACqD,GAAG,EAAEvC,OAAO,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC;EAAA,gBA1UKL,KAAKA,CAAAoG,EAAA,EAAAC,GAAA;IAAA,OAAApG,IAAA,CAAAqG,KAAA,OAAAC,SAAA;EAAA;AAAA,GA0UV;AAEDC,MAAM,CAACC,OAAO,GAAGzG,KAAK;AAEtBA,KAAK,CAACuD,UAAU,GAAGmD,IAAI,IACrBA,IAAI,KAAK,GAAG,IACZA,IAAI,KAAK,GAAG,IACZA,IAAI,KAAK,GAAG,IACZA,IAAI,KAAK,GAAG,IACZA,IAAI,KAAK,GAAG;AAEd1G,KAAK,CAACN,OAAO,GAAGA,OAAO;AACvBM,KAAK,CAACJ,OAAO,GAAGA,OAAO;AACvBI,KAAK,CAACP,QAAQ,GAAGA,QAAQ;AACzBO,KAAK,CAACF,UAAU,GAAGA,UAAU;AAC7BE,KAAK,CAACD,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}