{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst {\n  NotCachedError\n} = require('./errors.js');\nconst CacheEntry = require('./entry.js');\nconst remote = require('../remote.js');\n\n// do whatever is necessary to get a Response and return it\nconst cacheFetch = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (request, options) {\n    // try to find a cached entry that satisfies this request\n    const entry = yield CacheEntry.find(request, options);\n    if (!entry) {\n      // no cached result, if the cache mode is 'only-if-cached' that's a failure\n      if (options.cache === 'only-if-cached') {\n        throw new NotCachedError(request.url);\n      }\n\n      // otherwise, we make a request, store it and return it\n      const response = yield remote(request, options);\n      const newEntry = new CacheEntry({\n        request,\n        response,\n        options\n      });\n      return newEntry.store('miss');\n    }\n\n    // we have a cached response that satisfies this request, however if the cache\n    // mode is 'no-cache' then we send the revalidation request no matter what\n    if (options.cache === 'no-cache') {\n      return entry.revalidate(request, options);\n    }\n\n    // if the cached entry is not stale, or if the cache mode is 'force-cache' or\n    // 'only-if-cached' we can respond with the cached entry. set the status\n    // based on the result of needsRevalidation and respond\n    const _needsRevalidation = entry.policy.needsRevalidation(request);\n    if (options.cache === 'force-cache' || options.cache === 'only-if-cached' || !_needsRevalidation) {\n      return entry.respond(request.method, options, _needsRevalidation ? 'stale' : 'hit');\n    }\n\n    // if we got here, the cache entry is stale so revalidate it\n    return entry.revalidate(request, options);\n  });\n  return function cacheFetch(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\ncacheFetch.invalidate = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (request, options) {\n    if (!options.cachePath) {\n      return;\n    }\n    return CacheEntry.invalidate(request, options);\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nmodule.exports = cacheFetch;","map":{"version":3,"names":["NotCachedError","require","CacheEntry","remote","cacheFetch","_ref","_asyncToGenerator","request","options","entry","find","cache","url","response","newEntry","store","revalidate","_needsRevalidation","policy","needsRevalidation","respond","method","_x","_x2","apply","arguments","invalidate","_ref2","cachePath","_x3","_x4","module","exports"],"sources":["C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/make-fetch-happen/lib/cache/index.js"],"sourcesContent":["const { NotCachedError } = require('./errors.js')\nconst CacheEntry = require('./entry.js')\nconst remote = require('../remote.js')\n\n// do whatever is necessary to get a Response and return it\nconst cacheFetch = async (request, options) => {\n  // try to find a cached entry that satisfies this request\n  const entry = await CacheEntry.find(request, options)\n  if (!entry) {\n    // no cached result, if the cache mode is 'only-if-cached' that's a failure\n    if (options.cache === 'only-if-cached') {\n      throw new NotCachedError(request.url)\n    }\n\n    // otherwise, we make a request, store it and return it\n    const response = await remote(request, options)\n    const newEntry = new CacheEntry({ request, response, options })\n    return newEntry.store('miss')\n  }\n\n  // we have a cached response that satisfies this request, however if the cache\n  // mode is 'no-cache' then we send the revalidation request no matter what\n  if (options.cache === 'no-cache') {\n    return entry.revalidate(request, options)\n  }\n\n  // if the cached entry is not stale, or if the cache mode is 'force-cache' or\n  // 'only-if-cached' we can respond with the cached entry. set the status\n  // based on the result of needsRevalidation and respond\n  const _needsRevalidation = entry.policy.needsRevalidation(request)\n  if (options.cache === 'force-cache' ||\n      options.cache === 'only-if-cached' ||\n      !_needsRevalidation) {\n    return entry.respond(request.method, options, _needsRevalidation ? 'stale' : 'hit')\n  }\n\n  // if we got here, the cache entry is stale so revalidate it\n  return entry.revalidate(request, options)\n}\n\ncacheFetch.invalidate = async (request, options) => {\n  if (!options.cachePath) {\n    return\n  }\n\n  return CacheEntry.invalidate(request, options)\n}\n\nmodule.exports = cacheFetch\n"],"mappings":";AAAA,MAAM;EAAEA;AAAe,CAAC,GAAGC,OAAO,CAAC,aAAa,CAAC;AACjD,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC;AACxC,MAAME,MAAM,GAAGF,OAAO,CAAC,cAAc,CAAC;;AAEtC;AACA,MAAMG,UAAU;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,OAAO,EAAEC,OAAO,EAAK;IAC7C;IACA,MAAMC,KAAK,SAASP,UAAU,CAACQ,IAAI,CAACH,OAAO,EAAEC,OAAO,CAAC;IACrD,IAAI,CAACC,KAAK,EAAE;MACV;MACA,IAAID,OAAO,CAACG,KAAK,KAAK,gBAAgB,EAAE;QACtC,MAAM,IAAIX,cAAc,CAACO,OAAO,CAACK,GAAG,CAAC;MACvC;;MAEA;MACA,MAAMC,QAAQ,SAASV,MAAM,CAACI,OAAO,EAAEC,OAAO,CAAC;MAC/C,MAAMM,QAAQ,GAAG,IAAIZ,UAAU,CAAC;QAAEK,OAAO;QAAEM,QAAQ;QAAEL;MAAQ,CAAC,CAAC;MAC/D,OAAOM,QAAQ,CAACC,KAAK,CAAC,MAAM,CAAC;IAC/B;;IAEA;IACA;IACA,IAAIP,OAAO,CAACG,KAAK,KAAK,UAAU,EAAE;MAChC,OAAOF,KAAK,CAACO,UAAU,CAACT,OAAO,EAAEC,OAAO,CAAC;IAC3C;;IAEA;IACA;IACA;IACA,MAAMS,kBAAkB,GAAGR,KAAK,CAACS,MAAM,CAACC,iBAAiB,CAACZ,OAAO,CAAC;IAClE,IAAIC,OAAO,CAACG,KAAK,KAAK,aAAa,IAC/BH,OAAO,CAACG,KAAK,KAAK,gBAAgB,IAClC,CAACM,kBAAkB,EAAE;MACvB,OAAOR,KAAK,CAACW,OAAO,CAACb,OAAO,CAACc,MAAM,EAAEb,OAAO,EAAES,kBAAkB,GAAG,OAAO,GAAG,KAAK,CAAC;IACrF;;IAEA;IACA,OAAOR,KAAK,CAACO,UAAU,CAACT,OAAO,EAAEC,OAAO,CAAC;EAC3C,CAAC;EAAA,gBAjCKJ,UAAUA,CAAAkB,EAAA,EAAAC,GAAA;IAAA,OAAAlB,IAAA,CAAAmB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAiCf;AAEDrB,UAAU,CAACsB,UAAU;EAAA,IAAAC,KAAA,GAAArB,iBAAA,CAAG,WAAOC,OAAO,EAAEC,OAAO,EAAK;IAClD,IAAI,CAACA,OAAO,CAACoB,SAAS,EAAE;MACtB;IACF;IAEA,OAAO1B,UAAU,CAACwB,UAAU,CAACnB,OAAO,EAAEC,OAAO,CAAC;EAChD,CAAC;EAAA,iBAAAqB,GAAA,EAAAC,GAAA;IAAA,OAAAH,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA;AAEDM,MAAM,CAACC,OAAO,GAAG5B,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}