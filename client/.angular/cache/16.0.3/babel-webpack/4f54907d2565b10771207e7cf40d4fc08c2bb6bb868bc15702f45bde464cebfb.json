{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst childProcess = require('child_process');\nconst {\n  isLinux,\n  getReport\n} = require('./process');\nconst command = 'getconf GNU_LIBC_VERSION 2>&1 || true; ldd --version 2>&1 || true';\nlet commandOut = '';\nconst safeCommand = () => {\n  if (!commandOut) {\n    return new Promise(resolve => {\n      childProcess.exec(command, (err, out) => {\n        commandOut = err ? ' ' : out;\n        resolve(commandOut);\n      });\n    });\n  }\n  return commandOut;\n};\nconst safeCommandSync = () => {\n  if (!commandOut) {\n    try {\n      commandOut = childProcess.execSync(command, {\n        encoding: 'utf8'\n      });\n    } catch (_err) {\n      commandOut = ' ';\n    }\n  }\n  return commandOut;\n};\n\n/**\n * A String constant containing the value `glibc`.\n * @type {string}\n * @public\n */\nconst GLIBC = 'glibc';\n\n/**\n * A String constant containing the value `musl`.\n * @type {string}\n * @public\n */\nconst MUSL = 'musl';\nconst isFileMusl = f => f.includes('libc.musl-') || f.includes('ld-musl-');\nconst familyFromReport = () => {\n  const report = getReport();\n  if (report.header && report.header.glibcVersionRuntime) {\n    return GLIBC;\n  }\n  if (Array.isArray(report.sharedObjects)) {\n    if (report.sharedObjects.some(isFileMusl)) {\n      return MUSL;\n    }\n  }\n  return null;\n};\nconst familyFromCommand = out => {\n  const [getconf, ldd1] = out.split(/[\\r\\n]+/);\n  if (getconf && getconf.includes(GLIBC)) {\n    return GLIBC;\n  }\n  if (ldd1 && ldd1.includes(MUSL)) {\n    return MUSL;\n  }\n  return null;\n};\n\n/**\n * Resolves with the libc family when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */\nconst family = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* () {\n    let family = null;\n    if (isLinux()) {\n      family = familyFromReport();\n      if (!family) {\n        const out = yield safeCommand();\n        family = familyFromCommand(out);\n      }\n    }\n    return family;\n  });\n  return function family() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * Returns the libc family when it can be determined, `null` otherwise.\n * @returns {?string}\n */\nconst familySync = () => {\n  let family = null;\n  if (isLinux()) {\n    family = familyFromReport();\n    if (!family) {\n      const out = safeCommandSync();\n      family = familyFromCommand(out);\n    }\n  }\n  return family;\n};\n\n/**\n * Resolves `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {Promise<boolean>}\n */\nconst isNonGlibcLinux = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    return isLinux() && (yield family()) !== GLIBC;\n  });\n  return function isNonGlibcLinux() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/**\n * Returns `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {boolean}\n */\nconst isNonGlibcLinuxSync = () => isLinux() && familySync() !== GLIBC;\nconst versionFromReport = () => {\n  const report = getReport();\n  if (report.header && report.header.glibcVersionRuntime) {\n    return report.header.glibcVersionRuntime;\n  }\n  return null;\n};\nconst versionSuffix = s => s.trim().split(/\\s+/)[1];\nconst versionFromCommand = out => {\n  const [getconf, ldd1, ldd2] = out.split(/[\\r\\n]+/);\n  if (getconf && getconf.includes(GLIBC)) {\n    return versionSuffix(getconf);\n  }\n  if (ldd1 && ldd2 && ldd1.includes(MUSL)) {\n    return versionSuffix(ldd2);\n  }\n  return null;\n};\n\n/**\n * Resolves with the libc version when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */\nconst version = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    let version = null;\n    if (isLinux()) {\n      version = versionFromReport();\n      if (!version) {\n        const out = yield safeCommand();\n        version = versionFromCommand(out);\n      }\n    }\n    return version;\n  });\n  return function version() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/**\n * Returns the libc version when it can be determined, `null` otherwise.\n * @returns {?string}\n */\nconst versionSync = () => {\n  let version = null;\n  if (isLinux()) {\n    version = versionFromReport();\n    if (!version) {\n      const out = safeCommandSync();\n      version = versionFromCommand(out);\n    }\n  }\n  return version;\n};\nmodule.exports = {\n  GLIBC,\n  MUSL,\n  family,\n  familySync,\n  isNonGlibcLinux,\n  isNonGlibcLinuxSync,\n  version,\n  versionSync\n};","map":{"version":3,"names":["_asyncToGenerator","require","default","childProcess","isLinux","getReport","command","commandOut","safeCommand","Promise","resolve","exec","err","out","safeCommandSync","execSync","encoding","_err","GLIBC","MUSL","isFileMusl","f","includes","familyFromReport","report","header","glibcVersionRuntime","Array","isArray","sharedObjects","some","familyFromCommand","getconf","ldd1","split","family","_ref","apply","arguments","familySync","isNonGlibcLinux","_ref2","isNonGlibcLinuxSync","versionFromReport","versionSuffix","s","trim","versionFromCommand","ldd2","version","_ref3","versionSync","module","exports"],"sources":["C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/detect-libc/lib/detect-libc.js"],"sourcesContent":["'use strict';\n\nconst childProcess = require('child_process');\nconst { isLinux, getReport } = require('./process');\n\nconst command = 'getconf GNU_LIBC_VERSION 2>&1 || true; ldd --version 2>&1 || true';\nlet commandOut = '';\n\nconst safeCommand = () => {\n  if (!commandOut) {\n    return new Promise((resolve) => {\n      childProcess.exec(command, (err, out) => {\n        commandOut = err ? ' ' : out;\n        resolve(commandOut);\n      });\n    });\n  }\n  return commandOut;\n};\n\nconst safeCommandSync = () => {\n  if (!commandOut) {\n    try {\n      commandOut = childProcess.execSync(command, { encoding: 'utf8' });\n    } catch (_err) {\n      commandOut = ' ';\n    }\n  }\n  return commandOut;\n};\n\n/**\n * A String constant containing the value `glibc`.\n * @type {string}\n * @public\n */\nconst GLIBC = 'glibc';\n\n/**\n * A String constant containing the value `musl`.\n * @type {string}\n * @public\n */\nconst MUSL = 'musl';\n\nconst isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-');\n\nconst familyFromReport = () => {\n  const report = getReport();\n  if (report.header && report.header.glibcVersionRuntime) {\n    return GLIBC;\n  }\n  if (Array.isArray(report.sharedObjects)) {\n    if (report.sharedObjects.some(isFileMusl)) {\n      return MUSL;\n    }\n  }\n  return null;\n};\n\nconst familyFromCommand = (out) => {\n  const [getconf, ldd1] = out.split(/[\\r\\n]+/);\n  if (getconf && getconf.includes(GLIBC)) {\n    return GLIBC;\n  }\n  if (ldd1 && ldd1.includes(MUSL)) {\n    return MUSL;\n  }\n  return null;\n};\n\n/**\n * Resolves with the libc family when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */\nconst family = async () => {\n  let family = null;\n  if (isLinux()) {\n    family = familyFromReport();\n    if (!family) {\n      const out = await safeCommand();\n      family = familyFromCommand(out);\n    }\n  }\n  return family;\n};\n\n/**\n * Returns the libc family when it can be determined, `null` otherwise.\n * @returns {?string}\n */\nconst familySync = () => {\n  let family = null;\n  if (isLinux()) {\n    family = familyFromReport();\n    if (!family) {\n      const out = safeCommandSync();\n      family = familyFromCommand(out);\n    }\n  }\n  return family;\n};\n\n/**\n * Resolves `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {Promise<boolean>}\n */\nconst isNonGlibcLinux = async () => isLinux() && await family() !== GLIBC;\n\n/**\n * Returns `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {boolean}\n */\nconst isNonGlibcLinuxSync = () => isLinux() && familySync() !== GLIBC;\n\nconst versionFromReport = () => {\n  const report = getReport();\n  if (report.header && report.header.glibcVersionRuntime) {\n    return report.header.glibcVersionRuntime;\n  }\n  return null;\n};\n\nconst versionSuffix = (s) => s.trim().split(/\\s+/)[1];\n\nconst versionFromCommand = (out) => {\n  const [getconf, ldd1, ldd2] = out.split(/[\\r\\n]+/);\n  if (getconf && getconf.includes(GLIBC)) {\n    return versionSuffix(getconf);\n  }\n  if (ldd1 && ldd2 && ldd1.includes(MUSL)) {\n    return versionSuffix(ldd2);\n  }\n  return null;\n};\n\n/**\n * Resolves with the libc version when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */\nconst version = async () => {\n  let version = null;\n  if (isLinux()) {\n    version = versionFromReport();\n    if (!version) {\n      const out = await safeCommand();\n      version = versionFromCommand(out);\n    }\n  }\n  return version;\n};\n\n/**\n * Returns the libc version when it can be determined, `null` otherwise.\n * @returns {?string}\n */\nconst versionSync = () => {\n  let version = null;\n  if (isLinux()) {\n    version = versionFromReport();\n    if (!version) {\n      const out = safeCommandSync();\n      version = versionFromCommand(out);\n    }\n  }\n  return version;\n};\n\nmodule.exports = {\n  GLIBC,\n  MUSL,\n  family,\n  familySync,\n  isNonGlibcLinux,\n  isNonGlibcLinuxSync,\n  version,\n  versionSync\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}