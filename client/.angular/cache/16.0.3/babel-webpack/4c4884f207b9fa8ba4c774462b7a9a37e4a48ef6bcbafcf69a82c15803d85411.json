{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst util = require('util');\nconst pMap = require('p-map');\nconst contentPath = require('./content/path');\nconst fixOwner = require('./util/fix-owner');\nconst fs = require('@npmcli/fs');\nconst fsm = require('fs-minipass');\nconst glob = util.promisify(require('glob'));\nconst index = require('./entry-index');\nconst path = require('path');\nconst rimraf = util.promisify(require('rimraf'));\nconst ssri = require('ssri');\nconst globify = pattern => pattern.split('\\\\').join('/');\nconst hasOwnProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);\nconst verifyOpts = opts => ({\n  concurrency: 20,\n  log: {\n    silly() {}\n  },\n  ...opts\n});\nmodule.exports = verify;\nfunction verify(_x, _x2) {\n  return _verify.apply(this, arguments);\n}\nfunction _verify() {\n  _verify = _asyncToGenerator(function* (cache, opts) {\n    opts = verifyOpts(opts);\n    opts.log.silly('verify', 'verifying cache at', cache);\n    const steps = [markStartTime, fixPerms, garbageCollect, rebuildIndex, cleanTmp, writeVerifile, markEndTime];\n    const stats = {};\n    for (const step of steps) {\n      const label = step.name;\n      const start = new Date();\n      const s = yield step(cache, opts);\n      if (s) {\n        Object.keys(s).forEach(k => {\n          stats[k] = s[k];\n        });\n      }\n      const end = new Date();\n      if (!stats.runTime) {\n        stats.runTime = {};\n      }\n      stats.runTime[label] = end - start;\n    }\n    stats.runTime.total = stats.endTime - stats.startTime;\n    opts.log.silly('verify', 'verification finished for', cache, 'in', `${stats.runTime.total}ms`);\n    return stats;\n  });\n  return _verify.apply(this, arguments);\n}\nfunction markStartTime(_x3, _x4) {\n  return _markStartTime.apply(this, arguments);\n}\nfunction _markStartTime() {\n  _markStartTime = _asyncToGenerator(function* (cache, opts) {\n    return {\n      startTime: new Date()\n    };\n  });\n  return _markStartTime.apply(this, arguments);\n}\nfunction markEndTime(_x5, _x6) {\n  return _markEndTime.apply(this, arguments);\n}\nfunction _markEndTime() {\n  _markEndTime = _asyncToGenerator(function* (cache, opts) {\n    return {\n      endTime: new Date()\n    };\n  });\n  return _markEndTime.apply(this, arguments);\n}\nfunction fixPerms(_x7, _x8) {\n  return _fixPerms.apply(this, arguments);\n} // Implements a naive mark-and-sweep tracing garbage collector.\n//\n// The algorithm is basically as follows:\n// 1. Read (and filter) all index entries (\"pointers\")\n// 2. Mark each integrity value as \"live\"\n// 3. Read entire filesystem tree in `content-vX/` dir\n// 4. If content is live, verify its checksum and delete it if it fails\n// 5. If content is not marked as live, rimraf it.\n//\nfunction _fixPerms() {\n  _fixPerms = _asyncToGenerator(function* (cache, opts) {\n    opts.log.silly('verify', 'fixing cache permissions');\n    yield fixOwner.mkdirfix(cache, cache);\n    // TODO - fix file permissions too\n    yield fixOwner.chownr(cache, cache);\n    return null;\n  });\n  return _fixPerms.apply(this, arguments);\n}\nfunction garbageCollect(_x9, _x10) {\n  return _garbageCollect.apply(this, arguments);\n}\nfunction _garbageCollect() {\n  _garbageCollect = _asyncToGenerator(function* (cache, opts) {\n    opts.log.silly('verify', 'garbage collecting content');\n    const indexStream = index.lsStream(cache);\n    const liveContent = new Set();\n    indexStream.on('data', entry => {\n      if (opts.filter && !opts.filter(entry)) {\n        return;\n      }\n      liveContent.add(entry.integrity.toString());\n    });\n    yield new Promise((resolve, reject) => {\n      indexStream.on('end', resolve).on('error', reject);\n    });\n    const contentDir = contentPath.contentDir(cache);\n    const files = yield glob(globify(path.join(contentDir, '**')), {\n      follow: false,\n      nodir: true,\n      nosort: true\n    });\n    const stats = {\n      verifiedContent: 0,\n      reclaimedCount: 0,\n      reclaimedSize: 0,\n      badContentCount: 0,\n      keptSize: 0\n    };\n    yield pMap(files, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (f) {\n        const split = f.split(/[/\\\\]/);\n        const digest = split.slice(split.length - 3).join('');\n        const algo = split[split.length - 4];\n        const integrity = ssri.fromHex(digest, algo);\n        if (liveContent.has(integrity.toString())) {\n          const info = yield verifyContent(f, integrity);\n          if (!info.valid) {\n            stats.reclaimedCount++;\n            stats.badContentCount++;\n            stats.reclaimedSize += info.size;\n          } else {\n            stats.verifiedContent++;\n            stats.keptSize += info.size;\n          }\n        } else {\n          // No entries refer to this content. We can delete.\n          stats.reclaimedCount++;\n          const s = yield fs.stat(f);\n          yield rimraf(f);\n          stats.reclaimedSize += s.size;\n        }\n        return stats;\n      });\n      return function (_x20) {\n        return _ref.apply(this, arguments);\n      };\n    }(), {\n      concurrency: opts.concurrency\n    });\n    return stats;\n  });\n  return _garbageCollect.apply(this, arguments);\n}\nfunction verifyContent(_x11, _x12) {\n  return _verifyContent.apply(this, arguments);\n}\nfunction _verifyContent() {\n  _verifyContent = _asyncToGenerator(function* (filepath, sri) {\n    const contentInfo = {};\n    try {\n      const {\n        size\n      } = yield fs.stat(filepath);\n      contentInfo.size = size;\n      contentInfo.valid = true;\n      yield ssri.checkStream(new fsm.ReadStream(filepath), sri);\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return {\n          size: 0,\n          valid: false\n        };\n      }\n      if (err.code !== 'EINTEGRITY') {\n        throw err;\n      }\n      yield rimraf(filepath);\n      contentInfo.valid = false;\n    }\n    return contentInfo;\n  });\n  return _verifyContent.apply(this, arguments);\n}\nfunction rebuildIndex(_x13, _x14) {\n  return _rebuildIndex.apply(this, arguments);\n}\nfunction _rebuildIndex() {\n  _rebuildIndex = _asyncToGenerator(function* (cache, opts) {\n    opts.log.silly('verify', 'rebuilding index');\n    const entries = yield index.ls(cache);\n    const stats = {\n      missingContent: 0,\n      rejectedEntries: 0,\n      totalEntries: 0\n    };\n    const buckets = {};\n    for (const k in entries) {\n      /* istanbul ignore else */\n      if (hasOwnProperty(entries, k)) {\n        const hashed = index.hashKey(k);\n        const entry = entries[k];\n        const excluded = opts.filter && !opts.filter(entry);\n        excluded && stats.rejectedEntries++;\n        if (buckets[hashed] && !excluded) {\n          buckets[hashed].push(entry);\n        } else if (buckets[hashed] && excluded) {\n          // skip\n        } else if (excluded) {\n          buckets[hashed] = [];\n          buckets[hashed]._path = index.bucketPath(cache, k);\n        } else {\n          buckets[hashed] = [entry];\n          buckets[hashed]._path = index.bucketPath(cache, k);\n        }\n      }\n    }\n    yield pMap(Object.keys(buckets), key => {\n      return rebuildBucket(cache, buckets[key], stats, opts);\n    }, {\n      concurrency: opts.concurrency\n    });\n    return stats;\n  });\n  return _rebuildIndex.apply(this, arguments);\n}\nfunction rebuildBucket(_x15, _x16, _x17, _x18) {\n  return _rebuildBucket.apply(this, arguments);\n}\nfunction _rebuildBucket() {\n  _rebuildBucket = _asyncToGenerator(function* (cache, bucket, stats, opts) {\n    yield fs.truncate(bucket._path);\n    // This needs to be serialized because cacache explicitly\n    // lets very racy bucket conflicts clobber each other.\n    for (const entry of bucket) {\n      const content = contentPath(cache, entry.integrity);\n      try {\n        yield fs.stat(content);\n        yield index.insert(cache, entry.key, entry.integrity, {\n          metadata: entry.metadata,\n          size: entry.size\n        });\n        stats.totalEntries++;\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          stats.rejectedEntries++;\n          stats.missingContent++;\n        } else {\n          throw err;\n        }\n      }\n    }\n  });\n  return _rebuildBucket.apply(this, arguments);\n}\nfunction cleanTmp(cache, opts) {\n  opts.log.silly('verify', 'cleaning tmp directory');\n  return rimraf(path.join(cache, 'tmp'));\n}\nfunction writeVerifile(cache, opts) {\n  const verifile = path.join(cache, '_lastverified');\n  opts.log.silly('verify', 'writing verifile to ' + verifile);\n  try {\n    return fs.writeFile(verifile, `${Date.now()}`);\n  } finally {\n    fixOwner.chownr.sync(cache, verifile);\n  }\n}\nmodule.exports.lastRun = lastRun;\nfunction lastRun(_x19) {\n  return _lastRun.apply(this, arguments);\n}\nfunction _lastRun() {\n  _lastRun = _asyncToGenerator(function* (cache) {\n    const data = yield fs.readFile(path.join(cache, '_lastverified'), {\n      encoding: 'utf8'\n    });\n    return new Date(+data);\n  });\n  return _lastRun.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","default","util","pMap","contentPath","fixOwner","fs","fsm","glob","promisify","index","path","rimraf","ssri","globify","pattern","split","join","hasOwnProperty","obj","key","Object","prototype","call","verifyOpts","opts","concurrency","log","silly","module","exports","verify","_x","_x2","_verify","apply","arguments","cache","steps","markStartTime","fixPerms","garbageCollect","rebuildIndex","cleanTmp","writeVerifile","markEndTime","stats","step","label","name","start","Date","s","keys","forEach","k","end","runTime","total","endTime","startTime","_x3","_x4","_markStartTime","_x5","_x6","_markEndTime","_x7","_x8","_fixPerms","mkdirfix","chownr","_x9","_x10","_garbageCollect","indexStream","lsStream","liveContent","Set","on","entry","filter","add","integrity","toString","Promise","resolve","reject","contentDir","files","follow","nodir","nosort","verifiedContent","reclaimedCount","reclaimedSize","badContentCount","keptSize","_ref","f","digest","slice","length","algo","fromHex","has","info","verifyContent","valid","size","stat","_x20","_x11","_x12","_verifyContent","filepath","sri","contentInfo","checkStream","ReadStream","err","code","_x13","_x14","_rebuildIndex","entries","ls","missingContent","rejectedEntries","totalEntries","buckets","hashed","hashKey","excluded","push","_path","bucketPath","rebuildBucket","_x15","_x16","_x17","_x18","_rebuildBucket","bucket","truncate","content","insert","metadata","verifile","writeFile","now","sync","lastRun","_x19","_lastRun","data","readFile","encoding"],"sources":["C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/make-fetch-happen/node_modules/cacache/lib/verify.js"],"sourcesContent":["'use strict'\n\nconst util = require('util')\n\nconst pMap = require('p-map')\nconst contentPath = require('./content/path')\nconst fixOwner = require('./util/fix-owner')\nconst fs = require('@npmcli/fs')\nconst fsm = require('fs-minipass')\nconst glob = util.promisify(require('glob'))\nconst index = require('./entry-index')\nconst path = require('path')\nconst rimraf = util.promisify(require('rimraf'))\nconst ssri = require('ssri')\n\nconst globify = pattern => pattern.split('\\\\').join('/')\n\nconst hasOwnProperty = (obj, key) =>\n  Object.prototype.hasOwnProperty.call(obj, key)\n\nconst verifyOpts = (opts) => ({\n  concurrency: 20,\n  log: { silly () {} },\n  ...opts,\n})\n\nmodule.exports = verify\n\nasync function verify (cache, opts) {\n  opts = verifyOpts(opts)\n  opts.log.silly('verify', 'verifying cache at', cache)\n\n  const steps = [\n    markStartTime,\n    fixPerms,\n    garbageCollect,\n    rebuildIndex,\n    cleanTmp,\n    writeVerifile,\n    markEndTime,\n  ]\n\n  const stats = {}\n  for (const step of steps) {\n    const label = step.name\n    const start = new Date()\n    const s = await step(cache, opts)\n    if (s) {\n      Object.keys(s).forEach((k) => {\n        stats[k] = s[k]\n      })\n    }\n    const end = new Date()\n    if (!stats.runTime) {\n      stats.runTime = {}\n    }\n    stats.runTime[label] = end - start\n  }\n  stats.runTime.total = stats.endTime - stats.startTime\n  opts.log.silly(\n    'verify',\n    'verification finished for',\n    cache,\n    'in',\n    `${stats.runTime.total}ms`\n  )\n  return stats\n}\n\nasync function markStartTime (cache, opts) {\n  return { startTime: new Date() }\n}\n\nasync function markEndTime (cache, opts) {\n  return { endTime: new Date() }\n}\n\nasync function fixPerms (cache, opts) {\n  opts.log.silly('verify', 'fixing cache permissions')\n  await fixOwner.mkdirfix(cache, cache)\n  // TODO - fix file permissions too\n  await fixOwner.chownr(cache, cache)\n  return null\n}\n\n// Implements a naive mark-and-sweep tracing garbage collector.\n//\n// The algorithm is basically as follows:\n// 1. Read (and filter) all index entries (\"pointers\")\n// 2. Mark each integrity value as \"live\"\n// 3. Read entire filesystem tree in `content-vX/` dir\n// 4. If content is live, verify its checksum and delete it if it fails\n// 5. If content is not marked as live, rimraf it.\n//\nasync function garbageCollect (cache, opts) {\n  opts.log.silly('verify', 'garbage collecting content')\n  const indexStream = index.lsStream(cache)\n  const liveContent = new Set()\n  indexStream.on('data', (entry) => {\n    if (opts.filter && !opts.filter(entry)) {\n      return\n    }\n\n    liveContent.add(entry.integrity.toString())\n  })\n  await new Promise((resolve, reject) => {\n    indexStream.on('end', resolve).on('error', reject)\n  })\n  const contentDir = contentPath.contentDir(cache)\n  const files = await glob(globify(path.join(contentDir, '**')), {\n    follow: false,\n    nodir: true,\n    nosort: true,\n  })\n  const stats = {\n    verifiedContent: 0,\n    reclaimedCount: 0,\n    reclaimedSize: 0,\n    badContentCount: 0,\n    keptSize: 0,\n  }\n  await pMap(\n    files,\n    async (f) => {\n      const split = f.split(/[/\\\\]/)\n      const digest = split.slice(split.length - 3).join('')\n      const algo = split[split.length - 4]\n      const integrity = ssri.fromHex(digest, algo)\n      if (liveContent.has(integrity.toString())) {\n        const info = await verifyContent(f, integrity)\n        if (!info.valid) {\n          stats.reclaimedCount++\n          stats.badContentCount++\n          stats.reclaimedSize += info.size\n        } else {\n          stats.verifiedContent++\n          stats.keptSize += info.size\n        }\n      } else {\n        // No entries refer to this content. We can delete.\n        stats.reclaimedCount++\n        const s = await fs.stat(f)\n        await rimraf(f)\n        stats.reclaimedSize += s.size\n      }\n      return stats\n    },\n    { concurrency: opts.concurrency }\n  )\n  return stats\n}\n\nasync function verifyContent (filepath, sri) {\n  const contentInfo = {}\n  try {\n    const { size } = await fs.stat(filepath)\n    contentInfo.size = size\n    contentInfo.valid = true\n    await ssri.checkStream(new fsm.ReadStream(filepath), sri)\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return { size: 0, valid: false }\n    }\n    if (err.code !== 'EINTEGRITY') {\n      throw err\n    }\n\n    await rimraf(filepath)\n    contentInfo.valid = false\n  }\n  return contentInfo\n}\n\nasync function rebuildIndex (cache, opts) {\n  opts.log.silly('verify', 'rebuilding index')\n  const entries = await index.ls(cache)\n  const stats = {\n    missingContent: 0,\n    rejectedEntries: 0,\n    totalEntries: 0,\n  }\n  const buckets = {}\n  for (const k in entries) {\n    /* istanbul ignore else */\n    if (hasOwnProperty(entries, k)) {\n      const hashed = index.hashKey(k)\n      const entry = entries[k]\n      const excluded = opts.filter && !opts.filter(entry)\n      excluded && stats.rejectedEntries++\n      if (buckets[hashed] && !excluded) {\n        buckets[hashed].push(entry)\n      } else if (buckets[hashed] && excluded) {\n        // skip\n      } else if (excluded) {\n        buckets[hashed] = []\n        buckets[hashed]._path = index.bucketPath(cache, k)\n      } else {\n        buckets[hashed] = [entry]\n        buckets[hashed]._path = index.bucketPath(cache, k)\n      }\n    }\n  }\n  await pMap(\n    Object.keys(buckets),\n    (key) => {\n      return rebuildBucket(cache, buckets[key], stats, opts)\n    },\n    { concurrency: opts.concurrency }\n  )\n  return stats\n}\n\nasync function rebuildBucket (cache, bucket, stats, opts) {\n  await fs.truncate(bucket._path)\n  // This needs to be serialized because cacache explicitly\n  // lets very racy bucket conflicts clobber each other.\n  for (const entry of bucket) {\n    const content = contentPath(cache, entry.integrity)\n    try {\n      await fs.stat(content)\n      await index.insert(cache, entry.key, entry.integrity, {\n        metadata: entry.metadata,\n        size: entry.size,\n      })\n      stats.totalEntries++\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        stats.rejectedEntries++\n        stats.missingContent++\n      } else {\n        throw err\n      }\n    }\n  }\n}\n\nfunction cleanTmp (cache, opts) {\n  opts.log.silly('verify', 'cleaning tmp directory')\n  return rimraf(path.join(cache, 'tmp'))\n}\n\nfunction writeVerifile (cache, opts) {\n  const verifile = path.join(cache, '_lastverified')\n  opts.log.silly('verify', 'writing verifile to ' + verifile)\n  try {\n    return fs.writeFile(verifile, `${Date.now()}`)\n  } finally {\n    fixOwner.chownr.sync(cache, verifile)\n  }\n}\n\nmodule.exports.lastRun = lastRun\n\nasync function lastRun (cache) {\n  const data = await fs.readFile(path.join(cache, '_lastverified'), { encoding: 'utf8' })\n  return new Date(+data)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}