{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\nconst path = require('path');\nconst log = require('npmlog');\nconst os = require('os');\nconst processRelease = require('./process-release');\nconst win = process.platform === 'win32';\nconst findNodeDirectory = require('./find-node-directory');\nconst createConfigGypi = require('./create-config-gypi');\nconst msgFormat = require('util').format;\nvar findPython = require('./find-python');\nif (win) {\n  var findVisualStudio = require('./find-visualstudio');\n}\nfunction configure(gyp, argv, callback) {\n  var python;\n  var buildDir = path.resolve('build');\n  var buildBinsDir = path.join(buildDir, 'node_gyp_bins');\n  var configNames = ['config.gypi', 'common.gypi'];\n  var configs = [];\n  var nodeDir;\n  var release = processRelease(argv, gyp, process.version, process.release);\n  findPython(gyp.opts.python, function (err, found) {\n    if (err) {\n      callback(err);\n    } else {\n      python = found;\n      getNodeDir();\n    }\n  });\n  function getNodeDir() {\n    // 'python' should be set by now\n    process.env.PYTHON = python;\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, os.homedir());\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir);\n      createBuildDir();\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version);\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version);\n      }\n      if (!release.semver) {\n        // could not parse the version string with semver\n        return callback(new Error('Invalid version number: ' + release.version));\n      }\n\n      // If the tarball option is set, always remove and reinstall the headers\n      // into devdir. Otherwise only install if they're not already there.\n      gyp.opts.ensure = !gyp.opts.tarball;\n      gyp.commands.install([release.version], function (err) {\n        if (err) {\n          return callback(err);\n        }\n        log.verbose('get node dir', 'target node version installed:', release.versionDir);\n        nodeDir = path.resolve(gyp.devDir, release.versionDir);\n        createBuildDir();\n      });\n    }\n  }\n  function createBuildDir() {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir);\n    const deepestBuildDirSubdirectory = win ? buildDir : buildBinsDir;\n    fs.mkdir(deepestBuildDirSubdirectory, {\n      recursive: true\n    }, function (err, isNew) {\n      if (err) {\n        return callback(err);\n      }\n      log.verbose('build dir', '\"build\" dir needed to be created?', isNew ? 'Yes' : 'No');\n      if (win) {\n        findVisualStudio(release.semver, gyp.opts.msvs_version, createConfigFile);\n      } else {\n        createPythonSymlink();\n        createConfigFile();\n      }\n    });\n  }\n  function createPythonSymlink() {\n    const symlinkDestination = path.join(buildBinsDir, 'python3');\n    log.verbose('python symlink', `creating symlink to \"${python}\" at \"${symlinkDestination}\"`);\n    fs.unlink(symlinkDestination, function (err) {\n      if (err && err.code !== 'ENOENT') {\n        log.verbose('python symlink', 'error when attempting to remove existing symlink');\n        log.verbose('python symlink', err.stack, 'errno: ' + err.errno);\n      }\n      fs.symlink(python, symlinkDestination, function (err) {\n        if (err) {\n          log.verbose('python symlink', 'error when attempting to create Python symlink');\n          log.verbose('python symlink', err.stack, 'errno: ' + err.errno);\n        }\n      });\n    });\n  }\n  function createConfigFile(err, vsInfo) {\n    if (err) {\n      return callback(err);\n    }\n    if (process.platform === 'win32') {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015);\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path;\n    }\n    createConfigGypi({\n      gyp,\n      buildDir,\n      nodeDir,\n      vsInfo\n    }).then(configPath => {\n      configs.push(configPath);\n      findConfigs();\n    }).catch(err => {\n      callback(err);\n    });\n  }\n  function findConfigs() {\n    var name = configNames.shift();\n    if (!name) {\n      return runGyp();\n    }\n    var fullPath = path.resolve(name);\n    log.verbose(name, 'checking for gypi file: %s', fullPath);\n    fs.stat(fullPath, function (err) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          findConfigs(); // check next gypi filename\n        } else {\n          callback(err);\n        }\n      } else {\n        log.verbose(name, 'found gypi file');\n        configs.push(fullPath);\n        findConfigs();\n      }\n    });\n  }\n  function runGyp(err) {\n    if (err) {\n      return callback(err);\n    }\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"');\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'msvs');\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"');\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'make');\n      }\n    }\n\n    // include all the \".gypi\" files that were found\n    configs.forEach(function (config) {\n      argv.push('-I', config);\n    });\n\n    // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking.\n    var nodeExpFile;\n    if (process.platform === 'aix' || process.platform === 'os390' || process.platform === 'os400') {\n      var ext = process.platform === 'os390' ? 'x' : 'exp';\n      var nodeRootDir = findNodeDirectory();\n      var candidates;\n      if (process.platform === 'aix' || process.platform === 'os400') {\n        candidates = ['include/node/node', 'out/Release/node', 'out/Debug/node', 'node'].map(function (file) {\n          return file + '.' + ext;\n        });\n      } else {\n        candidates = ['out/Release/lib.target/libnode', 'out/Debug/lib.target/libnode', 'out/Release/obj.target/libnode', 'out/Debug/obj.target/libnode', 'lib/libnode'].map(function (file) {\n          return file + '.' + ext;\n        });\n      }\n      var logprefix = 'find exports file';\n      nodeExpFile = findAccessibleSync(logprefix, nodeRootDir, candidates);\n      if (nodeExpFile !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile);\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir);\n        log.error(logprefix, 'Could not find exports file');\n        return callback(new Error(msg));\n      }\n    }\n\n    // For z/OS we need to set up the path to zoslib include directory,\n    // which contains headers included in v8config.h.\n    var zoslibIncDir;\n    if (process.platform === 'os390') {\n      logprefix = \"find zoslib's zos-base.h:\";\n      let msg;\n      var zoslibIncPath = process.env.ZOSLIB_INCLUDES;\n      if (zoslibIncPath) {\n        zoslibIncPath = findAccessibleSync(logprefix, zoslibIncPath, ['zos-base.h']);\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find zos-base.h file in the directory set ' + 'in ZOSLIB_INCLUDES environment variable: %s; set it ' + 'to the correct path, or unset it to search %s', process.env.ZOSLIB_INCLUDES, nodeRootDir);\n        }\n      } else {\n        candidates = ['include/node/zoslib/zos-base.h', 'include/zoslib/zos-base.h', 'zoslib/include/zos-base.h', 'install/include/node/zoslib/zos-base.h'];\n        zoslibIncPath = findAccessibleSync(logprefix, nodeRootDir, candidates);\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find any of %s in directory %s; set ' + 'environmant variable ZOSLIB_INCLUDES to the path ' + 'that contains zos-base.h', candidates.toString(), nodeRootDir);\n        }\n      }\n      if (zoslibIncPath !== undefined) {\n        zoslibIncDir = path.dirname(zoslibIncPath);\n        log.verbose(logprefix, \"Found zoslib's zos-base.h in: %s\", zoslibIncDir);\n      } else if (release.version.split('.')[0] >= 16) {\n        // zoslib is only shipped in Node v16 and above.\n        log.error(logprefix, msg);\n        return callback(new Error(msg));\n      }\n    }\n\n    // this logic ported from the old `gyp_addon` python file\n    var gypScript = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py');\n    var addonGypi = path.resolve(__dirname, '..', 'addon.gypi');\n    var commonGypi = path.resolve(nodeDir, 'include/node/common.gypi');\n    fs.stat(commonGypi, function (err) {\n      if (err) {\n        commonGypi = path.resolve(nodeDir, 'common.gypi');\n      }\n      var outputDir = 'build';\n      if (win) {\n        // Windows expects an absolute path\n        outputDir = buildDir;\n      }\n      var nodeGypDir = path.resolve(__dirname, '..');\n      var nodeLibFile = path.join(nodeDir, !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)', release.name + '.lib');\n      argv.push('-I', addonGypi);\n      argv.push('-I', commonGypi);\n      argv.push('-Dlibrary=shared_library');\n      argv.push('-Dvisibility=default');\n      argv.push('-Dnode_root_dir=' + nodeDir);\n      if (process.platform === 'aix' || process.platform === 'os390' || process.platform === 'os400') {\n        argv.push('-Dnode_exp_file=' + nodeExpFile);\n        if (process.platform === 'os390' && zoslibIncDir) {\n          argv.push('-Dzoslib_include_dir=' + zoslibIncDir);\n        }\n      }\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir);\n\n      // Do this to keep Cygwin environments happy, else the unescaped '\\' gets eaten up,\n      // resulting in bad paths, Ex c:parentFolderfolderanotherFolder instead of c:\\parentFolder\\folder\\anotherFolder\n      if (win) {\n        nodeLibFile = nodeLibFile.replace(/\\\\/g, '\\\\\\\\');\n      }\n      argv.push('-Dnode_lib_file=' + nodeLibFile);\n      argv.push('-Dmodule_root_dir=' + process.cwd());\n      argv.push('-Dnode_engine=' + (gyp.opts.node_engine || process.jsEngine || 'v8'));\n      argv.push('--depth=.');\n      argv.push('--no-parallel');\n\n      // tell gyp to write the Makefile/Solution files into output_dir\n      argv.push('--generator-output', outputDir);\n\n      // tell make to write its output into the same dir\n      argv.push('-Goutput_dir=.');\n\n      // enforce use of the \"binding.gyp\" file\n      argv.unshift('binding.gyp');\n\n      // execute `gyp` from the current target nodedir\n      argv.unshift(gypScript);\n\n      // make sure python uses files that came with this particular node package\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')];\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH);\n      }\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':');\n      var cp = gyp.spawn(python, argv);\n      cp.on('exit', onCpExit);\n    });\n  }\n  function onCpExit(code) {\n    if (code !== 0) {\n      callback(new Error('`gyp` failed with exit code: ' + code));\n    } else {\n      // we're done\n      callback();\n    }\n  }\n}\n\n/**\n * Returns the first file or directory from an array of candidates that is\n * readable by the current user, or undefined if none of the candidates are\n * readable.\n */\nfunction findAccessibleSync(logprefix, dir, candidates) {\n  for (var next = 0; next < candidates.length; next++) {\n    var candidate = path.resolve(dir, candidates[next]);\n    try {\n      var fd = fs.openSync(candidate, 'r');\n    } catch (e) {\n      // this candidate was not found or not readable, do nothing\n      log.silly(logprefix, 'Could not open %s: %s', candidate, e.message);\n      continue;\n    }\n    fs.closeSync(fd);\n    log.silly(logprefix, 'Found readable %s', candidate);\n    return candidate;\n  }\n  return undefined;\n}\nmodule.exports = configure;\nmodule.exports.test = {\n  findAccessibleSync: findAccessibleSync\n};\nmodule.exports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module';","map":{"version":3,"names":["fs","require","path","log","os","processRelease","win","process","platform","findNodeDirectory","createConfigGypi","msgFormat","format","findPython","findVisualStudio","configure","gyp","argv","callback","python","buildDir","resolve","buildBinsDir","join","configNames","configs","nodeDir","release","version","opts","err","found","getNodeDir","env","PYTHON","nodedir","replace","homedir","verbose","createBuildDir","semver","Error","ensure","tarball","commands","install","versionDir","devDir","deepestBuildDirSubdirectory","mkdir","recursive","isNew","msvs_version","createConfigFile","createPythonSymlink","symlinkDestination","unlink","code","stack","errno","symlink","vsInfo","GYP_MSVS_VERSION","Math","min","versionYear","GYP_MSVS_OVERRIDE_PATH","then","configPath","push","findConfigs","catch","name","shift","runGyp","fullPath","stat","indexOf","forEach","config","nodeExpFile","ext","nodeRootDir","candidates","map","file","logprefix","findAccessibleSync","undefined","msg","error","zoslibIncDir","zoslibIncPath","ZOSLIB_INCLUDES","toString","dirname","split","gypScript","__dirname","addonGypi","commonGypi","outputDir","nodeGypDir","nodeLibFile","cwd","node_engine","jsEngine","unshift","pypath","PYTHONPATH","cp","spawn","on","onCpExit","dir","next","length","candidate","fd","openSync","e","silly","message","closeSync","module","exports","test","usage"],"sources":["C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/node-gyp/lib/configure.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst log = require('npmlog')\nconst os = require('os')\nconst processRelease = require('./process-release')\nconst win = process.platform === 'win32'\nconst findNodeDirectory = require('./find-node-directory')\nconst createConfigGypi = require('./create-config-gypi')\nconst msgFormat = require('util').format\nvar findPython = require('./find-python')\nif (win) {\n  var findVisualStudio = require('./find-visualstudio')\n}\n\nfunction configure (gyp, argv, callback) {\n  var python\n  var buildDir = path.resolve('build')\n  var buildBinsDir = path.join(buildDir, 'node_gyp_bins')\n  var configNames = ['config.gypi', 'common.gypi']\n  var configs = []\n  var nodeDir\n  var release = processRelease(argv, gyp, process.version, process.release)\n\n  findPython(gyp.opts.python, function (err, found) {\n    if (err) {\n      callback(err)\n    } else {\n      python = found\n      getNodeDir()\n    }\n  })\n\n  function getNodeDir () {\n    // 'python' should be set by now\n    process.env.PYTHON = python\n\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, os.homedir())\n\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir)\n      createBuildDir()\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n      }\n\n      if (!release.semver) {\n        // could not parse the version string with semver\n        return callback(new Error('Invalid version number: ' + release.version))\n      }\n\n      // If the tarball option is set, always remove and reinstall the headers\n      // into devdir. Otherwise only install if they're not already there.\n      gyp.opts.ensure = !gyp.opts.tarball\n\n      gyp.commands.install([release.version], function (err) {\n        if (err) {\n          return callback(err)\n        }\n        log.verbose('get node dir', 'target node version installed:', release.versionDir)\n        nodeDir = path.resolve(gyp.devDir, release.versionDir)\n        createBuildDir()\n      })\n    }\n  }\n\n  function createBuildDir () {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir)\n\n    const deepestBuildDirSubdirectory = win ? buildDir : buildBinsDir\n    fs.mkdir(deepestBuildDirSubdirectory, { recursive: true }, function (err, isNew) {\n      if (err) {\n        return callback(err)\n      }\n      log.verbose(\n        'build dir', '\"build\" dir needed to be created?', isNew ? 'Yes' : 'No'\n      )\n      if (win) {\n        findVisualStudio(release.semver, gyp.opts.msvs_version,\n          createConfigFile)\n      } else {\n        createPythonSymlink()\n        createConfigFile()\n      }\n    })\n  }\n\n  function createPythonSymlink () {\n    const symlinkDestination = path.join(buildBinsDir, 'python3')\n\n    log.verbose('python symlink', `creating symlink to \"${python}\" at \"${symlinkDestination}\"`)\n\n    fs.unlink(symlinkDestination, function (err) {\n      if (err && err.code !== 'ENOENT') {\n        log.verbose('python symlink', 'error when attempting to remove existing symlink')\n        log.verbose('python symlink', err.stack, 'errno: ' + err.errno)\n      }\n      fs.symlink(python, symlinkDestination, function (err) {\n        if (err) {\n          log.verbose('python symlink', 'error when attempting to create Python symlink')\n          log.verbose('python symlink', err.stack, 'errno: ' + err.errno)\n        }\n      })\n    })\n  }\n\n  function createConfigFile (err, vsInfo) {\n    if (err) {\n      return callback(err)\n    }\n    if (process.platform === 'win32') {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015)\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path\n    }\n    createConfigGypi({ gyp, buildDir, nodeDir, vsInfo }).then(configPath => {\n      configs.push(configPath)\n      findConfigs()\n    }).catch(err => {\n      callback(err)\n    })\n  }\n\n  function findConfigs () {\n    var name = configNames.shift()\n    if (!name) {\n      return runGyp()\n    }\n    var fullPath = path.resolve(name)\n\n    log.verbose(name, 'checking for gypi file: %s', fullPath)\n    fs.stat(fullPath, function (err) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          findConfigs() // check next gypi filename\n        } else {\n          callback(err)\n        }\n      } else {\n        log.verbose(name, 'found gypi file')\n        configs.push(fullPath)\n        findConfigs()\n      }\n    })\n  }\n\n  function runGyp (err) {\n    if (err) {\n      return callback(err)\n    }\n\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'msvs')\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'make')\n      }\n    }\n\n    // include all the \".gypi\" files that were found\n    configs.forEach(function (config) {\n      argv.push('-I', config)\n    })\n\n    // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking.\n    var nodeExpFile\n    if (process.platform === 'aix' || process.platform === 'os390' || process.platform === 'os400') {\n      var ext = process.platform === 'os390' ? 'x' : 'exp'\n      var nodeRootDir = findNodeDirectory()\n      var candidates\n\n      if (process.platform === 'aix' || process.platform === 'os400') {\n        candidates = [\n          'include/node/node',\n          'out/Release/node',\n          'out/Debug/node',\n          'node'\n        ].map(function (file) {\n          return file + '.' + ext\n        })\n      } else {\n        candidates = [\n          'out/Release/lib.target/libnode',\n          'out/Debug/lib.target/libnode',\n          'out/Release/obj.target/libnode',\n          'out/Debug/obj.target/libnode',\n          'lib/libnode'\n        ].map(function (file) {\n          return file + '.' + ext\n        })\n      }\n\n      var logprefix = 'find exports file'\n      nodeExpFile = findAccessibleSync(logprefix, nodeRootDir, candidates)\n      if (nodeExpFile !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile)\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir)\n        log.error(logprefix, 'Could not find exports file')\n        return callback(new Error(msg))\n      }\n    }\n\n    // For z/OS we need to set up the path to zoslib include directory,\n    // which contains headers included in v8config.h.\n    var zoslibIncDir\n    if (process.platform === 'os390') {\n      logprefix = \"find zoslib's zos-base.h:\"\n      let msg\n      var zoslibIncPath = process.env.ZOSLIB_INCLUDES\n      if (zoslibIncPath) {\n        zoslibIncPath = findAccessibleSync(logprefix, zoslibIncPath, ['zos-base.h'])\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find zos-base.h file in the directory set ' +\n                          'in ZOSLIB_INCLUDES environment variable: %s; set it ' +\n                          'to the correct path, or unset it to search %s', process.env.ZOSLIB_INCLUDES, nodeRootDir)\n        }\n      } else {\n        candidates = [\n          'include/node/zoslib/zos-base.h',\n          'include/zoslib/zos-base.h',\n          'zoslib/include/zos-base.h',\n          'install/include/node/zoslib/zos-base.h'\n        ]\n        zoslibIncPath = findAccessibleSync(logprefix, nodeRootDir, candidates)\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find any of %s in directory %s; set ' +\n                          'environmant variable ZOSLIB_INCLUDES to the path ' +\n                          'that contains zos-base.h', candidates.toString(), nodeRootDir)\n        }\n      }\n      if (zoslibIncPath !== undefined) {\n        zoslibIncDir = path.dirname(zoslibIncPath)\n        log.verbose(logprefix, \"Found zoslib's zos-base.h in: %s\", zoslibIncDir)\n      } else if (release.version.split('.')[0] >= 16) {\n        // zoslib is only shipped in Node v16 and above.\n        log.error(logprefix, msg)\n        return callback(new Error(msg))\n      }\n    }\n\n    // this logic ported from the old `gyp_addon` python file\n    var gypScript = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py')\n    var addonGypi = path.resolve(__dirname, '..', 'addon.gypi')\n    var commonGypi = path.resolve(nodeDir, 'include/node/common.gypi')\n    fs.stat(commonGypi, function (err) {\n      if (err) {\n        commonGypi = path.resolve(nodeDir, 'common.gypi')\n      }\n\n      var outputDir = 'build'\n      if (win) {\n        // Windows expects an absolute path\n        outputDir = buildDir\n      }\n      var nodeGypDir = path.resolve(__dirname, '..')\n\n      var nodeLibFile = path.join(nodeDir,\n        !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)',\n        release.name + '.lib')\n\n      argv.push('-I', addonGypi)\n      argv.push('-I', commonGypi)\n      argv.push('-Dlibrary=shared_library')\n      argv.push('-Dvisibility=default')\n      argv.push('-Dnode_root_dir=' + nodeDir)\n      if (process.platform === 'aix' || process.platform === 'os390' || process.platform === 'os400') {\n        argv.push('-Dnode_exp_file=' + nodeExpFile)\n        if (process.platform === 'os390' && zoslibIncDir) {\n          argv.push('-Dzoslib_include_dir=' + zoslibIncDir)\n        }\n      }\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir)\n\n      // Do this to keep Cygwin environments happy, else the unescaped '\\' gets eaten up,\n      // resulting in bad paths, Ex c:parentFolderfolderanotherFolder instead of c:\\parentFolder\\folder\\anotherFolder\n      if (win) {\n        nodeLibFile = nodeLibFile.replace(/\\\\/g, '\\\\\\\\')\n      }\n      argv.push('-Dnode_lib_file=' + nodeLibFile)\n      argv.push('-Dmodule_root_dir=' + process.cwd())\n      argv.push('-Dnode_engine=' +\n        (gyp.opts.node_engine || process.jsEngine || 'v8'))\n      argv.push('--depth=.')\n      argv.push('--no-parallel')\n\n      // tell gyp to write the Makefile/Solution files into output_dir\n      argv.push('--generator-output', outputDir)\n\n      // tell make to write its output into the same dir\n      argv.push('-Goutput_dir=.')\n\n      // enforce use of the \"binding.gyp\" file\n      argv.unshift('binding.gyp')\n\n      // execute `gyp` from the current target nodedir\n      argv.unshift(gypScript)\n\n      // make sure python uses files that came with this particular node package\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH)\n      }\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n      var cp = gyp.spawn(python, argv)\n      cp.on('exit', onCpExit)\n    })\n  }\n\n  function onCpExit (code) {\n    if (code !== 0) {\n      callback(new Error('`gyp` failed with exit code: ' + code))\n    } else {\n      // we're done\n      callback()\n    }\n  }\n}\n\n/**\n * Returns the first file or directory from an array of candidates that is\n * readable by the current user, or undefined if none of the candidates are\n * readable.\n */\nfunction findAccessibleSync (logprefix, dir, candidates) {\n  for (var next = 0; next < candidates.length; next++) {\n    var candidate = path.resolve(dir, candidates[next])\n    try {\n      var fd = fs.openSync(candidate, 'r')\n    } catch (e) {\n      // this candidate was not found or not readable, do nothing\n      log.silly(logprefix, 'Could not open %s: %s', candidate, e.message)\n      continue\n    }\n    fs.closeSync(fd)\n    log.silly(logprefix, 'Found readable %s', candidate)\n    return candidate\n  }\n\n  return undefined\n}\n\nmodule.exports = configure\nmodule.exports.test = {\n  findAccessibleSync: findAccessibleSync\n}\nmodule.exports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module'\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}