{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst {\n  dirname,\n  sep\n} = require('path');\nconst fs = require('./fs.js');\nconst getOptions = require('./common/get-options.js');\nconst withOwner = require('./with-owner.js');\nconst mkdtemp = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (prefix, opts) {\n    const options = getOptions(opts, {\n      copy: ['encoding'],\n      wrap: 'encoding'\n    });\n\n    // mkdtemp relies on the trailing path separator to indicate if it should\n    // create a directory inside of the prefix. if that's the case then the root\n    // we infer ownership from is the prefix itself, otherwise it's the dirname\n    // /tmp -> /tmpABCDEF, infers from /\n    // /tmp/ -> /tmp/ABCDEF, infers from /tmp\n    const root = prefix.endsWith(sep) ? prefix : dirname(prefix);\n    return withOwner(root, () => fs.mkdtemp(prefix, options), opts);\n  });\n  return function mkdtemp(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = mkdtemp;","map":{"version":3,"names":["dirname","sep","require","fs","getOptions","withOwner","mkdtemp","_ref","_asyncToGenerator","prefix","opts","options","copy","wrap","root","endsWith","_x","_x2","apply","arguments","module","exports"],"sources":["C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/make-fetch-happen/node_modules/@npmcli/fs/lib/mkdtemp.js"],"sourcesContent":["const { dirname, sep } = require('path')\n\nconst fs = require('./fs.js')\nconst getOptions = require('./common/get-options.js')\nconst withOwner = require('./with-owner.js')\n\nconst mkdtemp = async (prefix, opts) => {\n  const options = getOptions(opts, {\n    copy: ['encoding'],\n    wrap: 'encoding',\n  })\n\n  // mkdtemp relies on the trailing path separator to indicate if it should\n  // create a directory inside of the prefix. if that's the case then the root\n  // we infer ownership from is the prefix itself, otherwise it's the dirname\n  // /tmp -> /tmpABCDEF, infers from /\n  // /tmp/ -> /tmp/ABCDEF, infers from /tmp\n  const root = prefix.endsWith(sep) ? prefix : dirname(prefix)\n\n  return withOwner(root, () => fs.mkdtemp(prefix, options), opts)\n}\n\nmodule.exports = mkdtemp\n"],"mappings":";AAAA,MAAM;EAAEA,OAAO;EAAEC;AAAI,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAExC,MAAMC,EAAE,GAAGD,OAAO,CAAC,SAAS,CAAC;AAC7B,MAAME,UAAU,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AACrD,MAAMG,SAAS,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAE5C,MAAMI,OAAO;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,MAAM,EAAEC,IAAI,EAAK;IACtC,MAAMC,OAAO,GAAGP,UAAU,CAACM,IAAI,EAAE;MAC/BE,IAAI,EAAE,CAAC,UAAU,CAAC;MAClBC,IAAI,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACA;IACA,MAAMC,IAAI,GAAGL,MAAM,CAACM,QAAQ,CAACd,GAAG,CAAC,GAAGQ,MAAM,GAAGT,OAAO,CAACS,MAAM,CAAC;IAE5D,OAAOJ,SAAS,CAACS,IAAI,EAAE,MAAMX,EAAE,CAACG,OAAO,CAACG,MAAM,EAAEE,OAAO,CAAC,EAAED,IAAI,CAAC;EACjE,CAAC;EAAA,gBAdKJ,OAAOA,CAAAU,EAAA,EAAAC,GAAA;IAAA,OAAAV,IAAA,CAAAW,KAAA,OAAAC,SAAA;EAAA;AAAA,GAcZ;AAEDC,MAAM,CAACC,OAAO,GAAGf,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}