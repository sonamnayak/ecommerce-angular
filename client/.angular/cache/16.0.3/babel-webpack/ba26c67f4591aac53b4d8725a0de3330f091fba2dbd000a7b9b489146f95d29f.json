{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst fs = require('graceful-fs');\nconst log = require('npmlog');\nconst path = require('path');\nfunction parseConfigGypi(config) {\n  // translated from tools/js2c.py of Node.js\n  // 1. string comments\n  config = config.replace(/#.*/g, '');\n  // 2. join multiline strings\n  config = config.replace(/'$\\s+'/mg, '');\n  // 3. normalize string literals from ' into \"\n  config = config.replace(/'/g, '\"');\n  return JSON.parse(config);\n}\nfunction getBaseConfigGypi(_x) {\n  return _getBaseConfigGypi.apply(this, arguments);\n}\nfunction _getBaseConfigGypi() {\n  _getBaseConfigGypi = _asyncToGenerator(function* ({\n    gyp,\n    nodeDir\n  }) {\n    // try reading $nodeDir/include/node/config.gypi first when:\n    // 1. --dist-url or --nodedir is specified\n    // 2. and --force-process-config is not specified\n    const useCustomHeaders = gyp.opts.nodedir || gyp.opts.disturl || gyp.opts['dist-url'];\n    const shouldReadConfigGypi = useCustomHeaders && !gyp.opts['force-process-config'];\n    if (shouldReadConfigGypi && nodeDir) {\n      try {\n        const baseConfigGypiPath = path.resolve(nodeDir, 'include/node/config.gypi');\n        const baseConfigGypi = yield fs.promises.readFile(baseConfigGypiPath);\n        return parseConfigGypi(baseConfigGypi.toString());\n      } catch (err) {\n        log.warn('read config.gypi', err.message);\n      }\n    }\n\n    // fallback to process.config if it is invalid\n    return JSON.parse(JSON.stringify(process.config));\n  });\n  return _getBaseConfigGypi.apply(this, arguments);\n}\nfunction getCurrentConfigGypi(_x2) {\n  return _getCurrentConfigGypi.apply(this, arguments);\n}\nfunction _getCurrentConfigGypi() {\n  _getCurrentConfigGypi = _asyncToGenerator(function* ({\n    gyp,\n    nodeDir,\n    vsInfo\n  }) {\n    const config = yield getBaseConfigGypi({\n      gyp,\n      nodeDir\n    });\n    if (!config.target_defaults) {\n      config.target_defaults = {};\n    }\n    if (!config.variables) {\n      config.variables = {};\n    }\n    const defaults = config.target_defaults;\n    const variables = config.variables;\n\n    // don't inherit the \"defaults\" from the base config.gypi.\n    // doing so could cause problems in cases where the `node` executable was\n    // compiled on a different machine (with different lib/include paths) than\n    // the machine where the addon is being built to\n    defaults.cflags = [];\n    defaults.defines = [];\n    defaults.include_dirs = [];\n    defaults.libraries = [];\n\n    // set the default_configuration prop\n    if ('debug' in gyp.opts) {\n      defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release';\n    }\n    if (!defaults.default_configuration) {\n      defaults.default_configuration = 'Release';\n    }\n\n    // set the target_arch variable\n    variables.target_arch = gyp.opts.arch || process.arch || 'ia32';\n    if (variables.target_arch === 'arm64') {\n      defaults.msvs_configuration_platform = 'ARM64';\n      defaults.xcode_configuration_platform = 'arm64';\n    }\n\n    // set the node development directory\n    variables.nodedir = nodeDir;\n\n    // disable -T \"thin\" static archives by default\n    variables.standalone_static_library = gyp.opts.thin ? 0 : 1;\n    if (process.platform === 'win32') {\n      defaults.msbuild_toolset = vsInfo.toolset;\n      if (vsInfo.sdk) {\n        defaults.msvs_windows_target_platform_version = vsInfo.sdk;\n      }\n      if (variables.target_arch === 'arm64') {\n        if (vsInfo.versionMajor > 15 || vsInfo.versionMajor === 15 && vsInfo.versionMajor >= 9) {\n          defaults.msvs_enable_marmasm = 1;\n        } else {\n          log.warn('Compiling ARM64 assembly is only available in\\n' + 'Visual Studio 2017 version 15.9 and above');\n        }\n      }\n      variables.msbuild_path = vsInfo.msBuild;\n    }\n\n    // loop through the rest of the opts and add the unknown ones as variables.\n    // this allows for module-specific configure flags like:\n    //\n    //   $ node-gyp configure --shared-libxml2\n    Object.keys(gyp.opts).forEach(function (opt) {\n      if (opt === 'argv') {\n        return;\n      }\n      if (opt in gyp.configDefs) {\n        return;\n      }\n      variables[opt.replace(/-/g, '_')] = gyp.opts[opt];\n    });\n    return config;\n  });\n  return _getCurrentConfigGypi.apply(this, arguments);\n}\nfunction createConfigGypi(_x3) {\n  return _createConfigGypi.apply(this, arguments);\n}\nfunction _createConfigGypi() {\n  _createConfigGypi = _asyncToGenerator(function* ({\n    gyp,\n    buildDir,\n    nodeDir,\n    vsInfo\n  }) {\n    const configFilename = 'config.gypi';\n    const configPath = path.resolve(buildDir, configFilename);\n    log.verbose('build/' + configFilename, 'creating config file');\n    const config = yield getCurrentConfigGypi({\n      gyp,\n      nodeDir,\n      vsInfo\n    });\n\n    // ensures that any boolean values in config.gypi get stringified\n    function boolsToString(k, v) {\n      if (typeof v === 'boolean') {\n        return String(v);\n      }\n      return v;\n    }\n    log.silly('build/' + configFilename, config);\n\n    // now write out the config.gypi file to the build/ dir\n    const prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step';\n    const json = JSON.stringify(config, boolsToString, 2);\n    log.verbose('build/' + configFilename, 'writing out config file: %s', configPath);\n    yield fs.promises.writeFile(configPath, [prefix, json, ''].join('\\n'));\n    return configPath;\n  });\n  return _createConfigGypi.apply(this, arguments);\n}\nmodule.exports = createConfigGypi;\nmodule.exports.test = {\n  parseConfigGypi: parseConfigGypi,\n  getCurrentConfigGypi: getCurrentConfigGypi\n};","map":{"version":3,"names":["_asyncToGenerator","require","default","fs","log","path","parseConfigGypi","config","replace","JSON","parse","getBaseConfigGypi","_x","_getBaseConfigGypi","apply","arguments","gyp","nodeDir","useCustomHeaders","opts","nodedir","disturl","shouldReadConfigGypi","baseConfigGypiPath","resolve","baseConfigGypi","promises","readFile","toString","err","warn","message","stringify","process","getCurrentConfigGypi","_x2","_getCurrentConfigGypi","vsInfo","target_defaults","variables","defaults","cflags","defines","include_dirs","libraries","default_configuration","debug","target_arch","arch","msvs_configuration_platform","xcode_configuration_platform","standalone_static_library","thin","platform","msbuild_toolset","toolset","sdk","msvs_windows_target_platform_version","versionMajor","msvs_enable_marmasm","msbuild_path","msBuild","Object","keys","forEach","opt","configDefs","createConfigGypi","_x3","_createConfigGypi","buildDir","configFilename","configPath","verbose","boolsToString","k","v","String","silly","prefix","json","writeFile","join","module","exports","test"],"sources":["C:/Users/shinz/OneDrive/Desktop/web/ecommerce/node_modules/node-gyp/lib/create-config-gypi.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst log = require('npmlog')\nconst path = require('path')\n\nfunction parseConfigGypi (config) {\n  // translated from tools/js2c.py of Node.js\n  // 1. string comments\n  config = config.replace(/#.*/g, '')\n  // 2. join multiline strings\n  config = config.replace(/'$\\s+'/mg, '')\n  // 3. normalize string literals from ' into \"\n  config = config.replace(/'/g, '\"')\n  return JSON.parse(config)\n}\n\nasync function getBaseConfigGypi ({ gyp, nodeDir }) {\n  // try reading $nodeDir/include/node/config.gypi first when:\n  // 1. --dist-url or --nodedir is specified\n  // 2. and --force-process-config is not specified\n  const useCustomHeaders = gyp.opts.nodedir || gyp.opts.disturl || gyp.opts['dist-url']\n  const shouldReadConfigGypi = useCustomHeaders && !gyp.opts['force-process-config']\n  if (shouldReadConfigGypi && nodeDir) {\n    try {\n      const baseConfigGypiPath = path.resolve(nodeDir, 'include/node/config.gypi')\n      const baseConfigGypi = await fs.promises.readFile(baseConfigGypiPath)\n      return parseConfigGypi(baseConfigGypi.toString())\n    } catch (err) {\n      log.warn('read config.gypi', err.message)\n    }\n  }\n\n  // fallback to process.config if it is invalid\n  return JSON.parse(JSON.stringify(process.config))\n}\n\nasync function getCurrentConfigGypi ({ gyp, nodeDir, vsInfo }) {\n  const config = await getBaseConfigGypi({ gyp, nodeDir })\n  if (!config.target_defaults) {\n    config.target_defaults = {}\n  }\n  if (!config.variables) {\n    config.variables = {}\n  }\n\n  const defaults = config.target_defaults\n  const variables = config.variables\n\n  // don't inherit the \"defaults\" from the base config.gypi.\n  // doing so could cause problems in cases where the `node` executable was\n  // compiled on a different machine (with different lib/include paths) than\n  // the machine where the addon is being built to\n  defaults.cflags = []\n  defaults.defines = []\n  defaults.include_dirs = []\n  defaults.libraries = []\n\n  // set the default_configuration prop\n  if ('debug' in gyp.opts) {\n    defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release'\n  }\n\n  if (!defaults.default_configuration) {\n    defaults.default_configuration = 'Release'\n  }\n\n  // set the target_arch variable\n  variables.target_arch = gyp.opts.arch || process.arch || 'ia32'\n  if (variables.target_arch === 'arm64') {\n    defaults.msvs_configuration_platform = 'ARM64'\n    defaults.xcode_configuration_platform = 'arm64'\n  }\n\n  // set the node development directory\n  variables.nodedir = nodeDir\n\n  // disable -T \"thin\" static archives by default\n  variables.standalone_static_library = gyp.opts.thin ? 0 : 1\n\n  if (process.platform === 'win32') {\n    defaults.msbuild_toolset = vsInfo.toolset\n    if (vsInfo.sdk) {\n      defaults.msvs_windows_target_platform_version = vsInfo.sdk\n    }\n    if (variables.target_arch === 'arm64') {\n      if (vsInfo.versionMajor > 15 ||\n          (vsInfo.versionMajor === 15 && vsInfo.versionMajor >= 9)) {\n        defaults.msvs_enable_marmasm = 1\n      } else {\n        log.warn('Compiling ARM64 assembly is only available in\\n' +\n          'Visual Studio 2017 version 15.9 and above')\n      }\n    }\n    variables.msbuild_path = vsInfo.msBuild\n  }\n\n  // loop through the rest of the opts and add the unknown ones as variables.\n  // this allows for module-specific configure flags like:\n  //\n  //   $ node-gyp configure --shared-libxml2\n  Object.keys(gyp.opts).forEach(function (opt) {\n    if (opt === 'argv') {\n      return\n    }\n    if (opt in gyp.configDefs) {\n      return\n    }\n    variables[opt.replace(/-/g, '_')] = gyp.opts[opt]\n  })\n\n  return config\n}\n\nasync function createConfigGypi ({ gyp, buildDir, nodeDir, vsInfo }) {\n  const configFilename = 'config.gypi'\n  const configPath = path.resolve(buildDir, configFilename)\n\n  log.verbose('build/' + configFilename, 'creating config file')\n\n  const config = await getCurrentConfigGypi({ gyp, nodeDir, vsInfo })\n\n  // ensures that any boolean values in config.gypi get stringified\n  function boolsToString (k, v) {\n    if (typeof v === 'boolean') {\n      return String(v)\n    }\n    return v\n  }\n\n  log.silly('build/' + configFilename, config)\n\n  // now write out the config.gypi file to the build/ dir\n  const prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step'\n\n  const json = JSON.stringify(config, boolsToString, 2)\n  log.verbose('build/' + configFilename, 'writing out config file: %s', configPath)\n  await fs.promises.writeFile(configPath, [prefix, json, ''].join('\\n'))\n\n  return configPath\n}\n\nmodule.exports = createConfigGypi\nmodule.exports.test = {\n  parseConfigGypi: parseConfigGypi,\n  getCurrentConfigGypi: getCurrentConfigGypi\n}\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,iBAAA,GAAAC,OAAA,0GAAAC,OAAA;AAEZ,MAAMC,EAAE,GAAGF,OAAO,CAAC,aAAa,CAAC;AACjC,MAAMG,GAAG,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAC7B,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAE5B,SAASK,eAAeA,CAAEC,MAAM,EAAE;EAChC;EACA;EACAA,MAAM,GAAGA,MAAM,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACnC;EACAD,MAAM,GAAGA,MAAM,CAACC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;EACvC;EACAD,MAAM,GAAGA,MAAM,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAClC,OAAOC,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC;AAC3B;AAAC,SAEcI,iBAAiBA,CAAAC,EAAA;EAAA,OAAAC,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,mBAAA;EAAAA,kBAAA,GAAAb,iBAAA,CAAhC,WAAkC;IAAEgB,GAAG;IAAEC;EAAQ,CAAC,EAAE;IAClD;IACA;IACA;IACA,MAAMC,gBAAgB,GAAGF,GAAG,CAACG,IAAI,CAACC,OAAO,IAAIJ,GAAG,CAACG,IAAI,CAACE,OAAO,IAAIL,GAAG,CAACG,IAAI,CAAC,UAAU,CAAC;IACrF,MAAMG,oBAAoB,GAAGJ,gBAAgB,IAAI,CAACF,GAAG,CAACG,IAAI,CAAC,sBAAsB,CAAC;IAClF,IAAIG,oBAAoB,IAAIL,OAAO,EAAE;MACnC,IAAI;QACF,MAAMM,kBAAkB,GAAGlB,IAAI,CAACmB,OAAO,CAACP,OAAO,EAAE,0BAA0B,CAAC;QAC5E,MAAMQ,cAAc,SAAStB,EAAE,CAACuB,QAAQ,CAACC,QAAQ,CAACJ,kBAAkB,CAAC;QACrE,OAAOjB,eAAe,CAACmB,cAAc,CAACG,QAAQ,EAAE,CAAC;MACnD,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZzB,GAAG,CAAC0B,IAAI,CAAC,kBAAkB,EAAED,GAAG,CAACE,OAAO,CAAC;MAC3C;IACF;;IAEA;IACA,OAAOtB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACuB,SAAS,CAACC,OAAO,CAAC1B,MAAM,CAAC,CAAC;EACnD,CAAC;EAAA,OAAAM,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAEcmB,oBAAoBA,CAAAC,GAAA;EAAA,OAAAC,qBAAA,CAAAtB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAqB,sBAAA;EAAAA,qBAAA,GAAApC,iBAAA,CAAnC,WAAqC;IAAEgB,GAAG;IAAEC,OAAO;IAAEoB;EAAO,CAAC,EAAE;IAC7D,MAAM9B,MAAM,SAASI,iBAAiB,CAAC;MAAEK,GAAG;MAAEC;IAAQ,CAAC,CAAC;IACxD,IAAI,CAACV,MAAM,CAAC+B,eAAe,EAAE;MAC3B/B,MAAM,CAAC+B,eAAe,GAAG,CAAC,CAAC;IAC7B;IACA,IAAI,CAAC/B,MAAM,CAACgC,SAAS,EAAE;MACrBhC,MAAM,CAACgC,SAAS,GAAG,CAAC,CAAC;IACvB;IAEA,MAAMC,QAAQ,GAAGjC,MAAM,CAAC+B,eAAe;IACvC,MAAMC,SAAS,GAAGhC,MAAM,CAACgC,SAAS;;IAElC;IACA;IACA;IACA;IACAC,QAAQ,CAACC,MAAM,GAAG,EAAE;IACpBD,QAAQ,CAACE,OAAO,GAAG,EAAE;IACrBF,QAAQ,CAACG,YAAY,GAAG,EAAE;IAC1BH,QAAQ,CAACI,SAAS,GAAG,EAAE;;IAEvB;IACA,IAAI,OAAO,IAAI5B,GAAG,CAACG,IAAI,EAAE;MACvBqB,QAAQ,CAACK,qBAAqB,GAAG7B,GAAG,CAACG,IAAI,CAAC2B,KAAK,GAAG,OAAO,GAAG,SAAS;IACvE;IAEA,IAAI,CAACN,QAAQ,CAACK,qBAAqB,EAAE;MACnCL,QAAQ,CAACK,qBAAqB,GAAG,SAAS;IAC5C;;IAEA;IACAN,SAAS,CAACQ,WAAW,GAAG/B,GAAG,CAACG,IAAI,CAAC6B,IAAI,IAAIf,OAAO,CAACe,IAAI,IAAI,MAAM;IAC/D,IAAIT,SAAS,CAACQ,WAAW,KAAK,OAAO,EAAE;MACrCP,QAAQ,CAACS,2BAA2B,GAAG,OAAO;MAC9CT,QAAQ,CAACU,4BAA4B,GAAG,OAAO;IACjD;;IAEA;IACAX,SAAS,CAACnB,OAAO,GAAGH,OAAO;;IAE3B;IACAsB,SAAS,CAACY,yBAAyB,GAAGnC,GAAG,CAACG,IAAI,CAACiC,IAAI,GAAG,CAAC,GAAG,CAAC;IAE3D,IAAInB,OAAO,CAACoB,QAAQ,KAAK,OAAO,EAAE;MAChCb,QAAQ,CAACc,eAAe,GAAGjB,MAAM,CAACkB,OAAO;MACzC,IAAIlB,MAAM,CAACmB,GAAG,EAAE;QACdhB,QAAQ,CAACiB,oCAAoC,GAAGpB,MAAM,CAACmB,GAAG;MAC5D;MACA,IAAIjB,SAAS,CAACQ,WAAW,KAAK,OAAO,EAAE;QACrC,IAAIV,MAAM,CAACqB,YAAY,GAAG,EAAE,IACvBrB,MAAM,CAACqB,YAAY,KAAK,EAAE,IAAIrB,MAAM,CAACqB,YAAY,IAAI,CAAE,EAAE;UAC5DlB,QAAQ,CAACmB,mBAAmB,GAAG,CAAC;QAClC,CAAC,MAAM;UACLvD,GAAG,CAAC0B,IAAI,CAAC,iDAAiD,GACxD,2CAA2C,CAAC;QAChD;MACF;MACAS,SAAS,CAACqB,YAAY,GAAGvB,MAAM,CAACwB,OAAO;IACzC;;IAEA;IACA;IACA;IACA;IACAC,MAAM,CAACC,IAAI,CAAC/C,GAAG,CAACG,IAAI,CAAC,CAAC6C,OAAO,CAAC,UAAUC,GAAG,EAAE;MAC3C,IAAIA,GAAG,KAAK,MAAM,EAAE;QAClB;MACF;MACA,IAAIA,GAAG,IAAIjD,GAAG,CAACkD,UAAU,EAAE;QACzB;MACF;MACA3B,SAAS,CAAC0B,GAAG,CAACzD,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,GAAGQ,GAAG,CAACG,IAAI,CAAC8C,GAAG,CAAC;IACnD,CAAC,CAAC;IAEF,OAAO1D,MAAM;EACf,CAAC;EAAA,OAAA6B,qBAAA,CAAAtB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAEcoD,gBAAgBA,CAAAC,GAAA;EAAA,OAAAC,iBAAA,CAAAvD,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAsD,kBAAA;EAAAA,iBAAA,GAAArE,iBAAA,CAA/B,WAAiC;IAAEgB,GAAG;IAAEsD,QAAQ;IAAErD,OAAO;IAAEoB;EAAO,CAAC,EAAE;IACnE,MAAMkC,cAAc,GAAG,aAAa;IACpC,MAAMC,UAAU,GAAGnE,IAAI,CAACmB,OAAO,CAAC8C,QAAQ,EAAEC,cAAc,CAAC;IAEzDnE,GAAG,CAACqE,OAAO,CAAC,QAAQ,GAAGF,cAAc,EAAE,sBAAsB,CAAC;IAE9D,MAAMhE,MAAM,SAAS2B,oBAAoB,CAAC;MAAElB,GAAG;MAAEC,OAAO;MAAEoB;IAAO,CAAC,CAAC;;IAEnE;IACA,SAASqC,aAAaA,CAAEC,CAAC,EAAEC,CAAC,EAAE;MAC5B,IAAI,OAAOA,CAAC,KAAK,SAAS,EAAE;QAC1B,OAAOC,MAAM,CAACD,CAAC,CAAC;MAClB;MACA,OAAOA,CAAC;IACV;IAEAxE,GAAG,CAAC0E,KAAK,CAAC,QAAQ,GAAGP,cAAc,EAAEhE,MAAM,CAAC;;IAE5C;IACA,MAAMwE,MAAM,GAAG,mEAAmE;IAElF,MAAMC,IAAI,GAAGvE,IAAI,CAACuB,SAAS,CAACzB,MAAM,EAAEmE,aAAa,EAAE,CAAC,CAAC;IACrDtE,GAAG,CAACqE,OAAO,CAAC,QAAQ,GAAGF,cAAc,EAAE,6BAA6B,EAAEC,UAAU,CAAC;IACjF,MAAMrE,EAAE,CAACuB,QAAQ,CAACuD,SAAS,CAACT,UAAU,EAAE,CAACO,MAAM,EAAEC,IAAI,EAAE,EAAE,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC;IAEtE,OAAOV,UAAU;EACnB,CAAC;EAAA,OAAAH,iBAAA,CAAAvD,KAAA,OAAAC,SAAA;AAAA;AAEDoE,MAAM,CAACC,OAAO,GAAGjB,gBAAgB;AACjCgB,MAAM,CAACC,OAAO,CAACC,IAAI,GAAG;EACpB/E,eAAe,EAAEA,eAAe;EAChC4B,oBAAoB,EAAEA;AACxB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}